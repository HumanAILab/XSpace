{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/jaylin/Documents/xspace/xspace-web-demos/sharedCoffeeCombined/packages/blaze/materializer.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"packages/blaze/materializer.js","filename":"/Users/jaylin/Documents/xspace/xspace-web-demos/sharedCoffeeCombined/packages/blaze/materializer.js","passPerPreset":false,"envName":"development","cwd":"/Users/jaylin/Documents/xspace/xspace-web-demos/sharedCoffeeCombined","root":"/Users/jaylin/Documents/xspace/xspace-web-demos/sharedCoffeeCombined","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.9.2","helpers":true,"useESModules":false,"corejs":false}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":{},"_verified":{},"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/jaylin/Documents/xspace/xspace-web-demos/sharedCoffeeCombined/packages/blaze/materializer.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/blaze/materializer.js"}},"code":"// Turns HTMLjs into DOM nodes and DOMRanges.\n//\n// - `htmljs`: the value to materialize, which may be any of the htmljs\n//   types (Tag, CharRef, Comment, Raw, array, string, boolean, number,\n//   null, or undefined) or a View or Template (which will be used to\n//   construct a View).\n// - `intoArray`: the array of DOM nodes and DOMRanges to push the output\n//   into (required)\n// - `parentView`: the View we are materializing content for (optional)\n// - `_existingWorkStack`: optional argument, only used for recursive\n//   calls when there is some other _materializeDOM on the call stack.\n//   If _materializeDOM called your function and passed in a workStack,\n//   pass it back when you call _materializeDOM (such as from a workStack\n//   task).\n//\n// Returns `intoArray`, which is especially useful if you pass in `[]`.\nBlaze._materializeDOM = function (htmljs, intoArray, parentView, _existingWorkStack) {\n  // In order to use fewer stack frames, materializeDOMInner can push\n  // tasks onto `workStack`, and they will be popped off\n  // and run, last first, after materializeDOMInner returns.  The\n  // reason we use a stack instead of a queue is so that we recurse\n  // depth-first, doing newer tasks first.\n  var workStack = _existingWorkStack || [];\n  materializeDOMInner(htmljs, intoArray, parentView, workStack);\n\n  if (!_existingWorkStack) {\n    // We created the work stack, so we are responsible for finishing\n    // the work.  Call each \"task\" function, starting with the top\n    // of the stack.\n    while (workStack.length) {\n      // Note that running task() may push new items onto workStack.\n      var task = workStack.pop();\n      task();\n    }\n  }\n\n  return intoArray;\n};\n\nvar materializeDOMInner = function (htmljs, intoArray, parentView, workStack) {\n  if (htmljs == null) {\n    // null or undefined\n    return;\n  }\n\n  switch (typeof htmljs) {\n    case 'string':\n    case 'boolean':\n    case 'number':\n      intoArray.push(document.createTextNode(String(htmljs)));\n      return;\n\n    case 'object':\n      if (htmljs.htmljsType) {\n        switch (htmljs.htmljsType) {\n          case HTML.Tag.htmljsType:\n            intoArray.push(materializeTag(htmljs, parentView, workStack));\n            return;\n\n          case HTML.CharRef.htmljsType:\n            intoArray.push(document.createTextNode(htmljs.str));\n            return;\n\n          case HTML.Comment.htmljsType:\n            intoArray.push(document.createComment(htmljs.sanitizedValue));\n            return;\n\n          case HTML.Raw.htmljsType:\n            // Get an array of DOM nodes by using the browser's HTML parser\n            // (like innerHTML).\n            var nodes = Blaze._DOMBackend.parseHTML(htmljs.value);\n\n            for (var i = 0; i < nodes.length; i++) intoArray.push(nodes[i]);\n\n            return;\n        }\n      } else if (HTML.isArray(htmljs)) {\n        for (var i = htmljs.length - 1; i >= 0; i--) {\n          workStack.push(Blaze._bind(Blaze._materializeDOM, null, htmljs[i], intoArray, parentView, workStack));\n        }\n\n        return;\n      } else {\n        if (htmljs instanceof Blaze.Template) {\n          htmljs = htmljs.constructView(); // fall through to Blaze.View case below\n        }\n\n        if (htmljs instanceof Blaze.View) {\n          Blaze._materializeView(htmljs, parentView, workStack, intoArray);\n\n          return;\n        }\n      }\n\n  }\n\n  throw new Error(\"Unexpected object in htmljs: \" + htmljs);\n};\n\nvar materializeTag = function (tag, parentView, workStack) {\n  var tagName = tag.tagName;\n  var elem;\n\n  if ((HTML.isKnownSVGElement(tagName) || isSVGAnchor(tag)) && document.createElementNS) {\n    // inline SVG\n    elem = document.createElementNS('http://www.w3.org/2000/svg', tagName);\n  } else {\n    // normal elements\n    elem = document.createElement(tagName);\n  }\n\n  var rawAttrs = tag.attrs;\n  var children = tag.children;\n\n  if (tagName === 'textarea' && tag.children.length && !(rawAttrs && 'value' in rawAttrs)) {\n    // Provide very limited support for TEXTAREA tags with children\n    // rather than a \"value\" attribute.\n    // Reactivity in the form of Views nested in the tag's children\n    // won't work.  Compilers should compile textarea contents into\n    // the \"value\" attribute of the tag, wrapped in a function if there\n    // is reactivity.\n    if (typeof rawAttrs === 'function' || HTML.isArray(rawAttrs)) {\n      throw new Error(\"Can't have reactive children of TEXTAREA node; \" + \"use the 'value' attribute instead.\");\n    }\n\n    rawAttrs = _.extend({}, rawAttrs || null);\n    rawAttrs.value = Blaze._expand(children, parentView);\n    children = [];\n  }\n\n  if (rawAttrs) {\n    var attrUpdater = new ElementAttributesUpdater(elem);\n\n    var updateAttributes = function () {\n      var expandedAttrs = Blaze._expandAttributes(rawAttrs, parentView);\n\n      var flattenedAttrs = HTML.flattenAttributes(expandedAttrs);\n      var stringAttrs = {};\n\n      for (var attrName in flattenedAttrs) {\n        // map `null`, `undefined`, and `false` to null, which is important\n        // so that attributes with nully values are considered absent.\n        // stringify anything else (e.g. strings, booleans, numbers including 0).\n        if (flattenedAttrs[attrName] == null || flattenedAttrs[attrName] === false) stringAttrs[attrName] = null;else stringAttrs[attrName] = Blaze._toText(flattenedAttrs[attrName], parentView, HTML.TEXTMODE.STRING);\n      }\n\n      attrUpdater.update(stringAttrs);\n    };\n\n    var updaterComputation;\n\n    if (parentView) {\n      updaterComputation = parentView.autorun(updateAttributes, undefined, 'updater');\n    } else {\n      updaterComputation = Tracker.nonreactive(function () {\n        return Tracker.autorun(function () {\n          Tracker._withCurrentView(parentView, updateAttributes);\n        });\n      });\n    }\n\n    Blaze._DOMBackend.Teardown.onElementTeardown(elem, function attrTeardown() {\n      updaterComputation.stop();\n    });\n  }\n\n  if (children.length) {\n    var childNodesAndRanges = []; // push this function first so that it's done last\n\n    workStack.push(function () {\n      for (var i = 0; i < childNodesAndRanges.length; i++) {\n        var x = childNodesAndRanges[i];\n        if (x instanceof Blaze._DOMRange) x.attach(elem);else elem.appendChild(x);\n      }\n    }); // now push the task that calculates childNodesAndRanges\n\n    workStack.push(Blaze._bind(Blaze._materializeDOM, null, children, childNodesAndRanges, parentView, workStack));\n  }\n\n  return elem;\n};\n\nvar isSVGAnchor = function (node) {\n  // We generally aren't able to detect SVG <a> elements because\n  // if \"A\" were in our list of known svg element names, then all\n  // <a> nodes would be created using\n  // `document.createElementNS`. But in the special case of <a\n  // xlink:href=\"...\">, we can at least detect that attribute and\n  // create an SVG <a> tag in that case.\n  //\n  // However, we still have a general problem of knowing when to\n  // use document.createElementNS and when to use\n  // document.createElement; for example, font tags will always\n  // be created as SVG elements which can cause other\n  // problems. #1977\n  return node.tagName === \"a\" && node.attrs && node.attrs[\"xlink:href\"] !== undefined;\n};","map":{"version":3,"sources":["packages/blaze/materializer.js"],"names":["Blaze","_materializeDOM","htmljs","intoArray","parentView","_existingWorkStack","workStack","materializeDOMInner","length","task","pop","push","document","createTextNode","String","htmljsType","HTML","Tag","materializeTag","CharRef","str","Comment","createComment","sanitizedValue","Raw","nodes","_DOMBackend","parseHTML","value","i","isArray","_bind","Template","constructView","View","_materializeView","Error","tag","tagName","elem","isKnownSVGElement","isSVGAnchor","createElementNS","createElement","rawAttrs","attrs","children","_","extend","_expand","attrUpdater","ElementAttributesUpdater","updateAttributes","expandedAttrs","_expandAttributes","flattenedAttrs","flattenAttributes","stringAttrs","attrName","_toText","TEXTMODE","STRING","update","updaterComputation","autorun","undefined","Tracker","nonreactive","_withCurrentView","Teardown","onElementTeardown","attrTeardown","stop","childNodesAndRanges","x","_DOMRange","attach","appendChild","node"],"mappings":"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","sourcesContent":["// Turns HTMLjs into DOM nodes and DOMRanges.\n//\n// - `htmljs`: the value to materialize, which may be any of the htmljs\n//   types (Tag, CharRef, Comment, Raw, array, string, boolean, number,\n//   null, or undefined) or a View or Template (which will be used to\n//   construct a View).\n// - `intoArray`: the array of DOM nodes and DOMRanges to push the output\n//   into (required)\n// - `parentView`: the View we are materializing content for (optional)\n// - `_existingWorkStack`: optional argument, only used for recursive\n//   calls when there is some other _materializeDOM on the call stack.\n//   If _materializeDOM called your function and passed in a workStack,\n//   pass it back when you call _materializeDOM (such as from a workStack\n//   task).\n//\n// Returns `intoArray`, which is especially useful if you pass in `[]`.\nBlaze._materializeDOM = function (htmljs, intoArray, parentView,\n                                  _existingWorkStack) {\n  // In order to use fewer stack frames, materializeDOMInner can push\n  // tasks onto `workStack`, and they will be popped off\n  // and run, last first, after materializeDOMInner returns.  The\n  // reason we use a stack instead of a queue is so that we recurse\n  // depth-first, doing newer tasks first.\n  var workStack = (_existingWorkStack || []);\n  materializeDOMInner(htmljs, intoArray, parentView, workStack);\n\n  if (! _existingWorkStack) {\n    // We created the work stack, so we are responsible for finishing\n    // the work.  Call each \"task\" function, starting with the top\n    // of the stack.\n    while (workStack.length) {\n      // Note that running task() may push new items onto workStack.\n      var task = workStack.pop();\n      task();\n    }\n  }\n\n  return intoArray;\n};\n\nvar materializeDOMInner = function (htmljs, intoArray, parentView, workStack) {\n  if (htmljs == null) {\n    // null or undefined\n    return;\n  }\n\n  switch (typeof htmljs) {\n  case 'string': case 'boolean': case 'number':\n    intoArray.push(document.createTextNode(String(htmljs)));\n    return;\n  case 'object':\n    if (htmljs.htmljsType) {\n      switch (htmljs.htmljsType) {\n      case HTML.Tag.htmljsType:\n        intoArray.push(materializeTag(htmljs, parentView, workStack));\n        return;\n      case HTML.CharRef.htmljsType:\n        intoArray.push(document.createTextNode(htmljs.str));\n        return;\n      case HTML.Comment.htmljsType:\n        intoArray.push(document.createComment(htmljs.sanitizedValue));\n        return;\n      case HTML.Raw.htmljsType:\n        // Get an array of DOM nodes by using the browser's HTML parser\n        // (like innerHTML).\n        var nodes = Blaze._DOMBackend.parseHTML(htmljs.value);\n        for (var i = 0; i < nodes.length; i++)\n          intoArray.push(nodes[i]);\n        return;\n      }\n    } else if (HTML.isArray(htmljs)) {\n      for (var i = htmljs.length-1; i >= 0; i--) {\n        workStack.push(Blaze._bind(Blaze._materializeDOM, null,\n                              htmljs[i], intoArray, parentView, workStack));\n      }\n      return;\n    } else {\n      if (htmljs instanceof Blaze.Template) {\n        htmljs = htmljs.constructView();\n        // fall through to Blaze.View case below\n      }\n      if (htmljs instanceof Blaze.View) {\n        Blaze._materializeView(htmljs, parentView, workStack, intoArray);\n        return;\n      }\n    }\n  }\n\n  throw new Error(\"Unexpected object in htmljs: \" + htmljs);\n};\n\nvar materializeTag = function (tag, parentView, workStack) {\n  var tagName = tag.tagName;\n  var elem;\n  if ((HTML.isKnownSVGElement(tagName) || isSVGAnchor(tag))\n      && document.createElementNS) {\n    // inline SVG\n    elem = document.createElementNS('http://www.w3.org/2000/svg', tagName);\n  } else {\n    // normal elements\n    elem = document.createElement(tagName);\n  }\n\n  var rawAttrs = tag.attrs;\n  var children = tag.children;\n  if (tagName === 'textarea' && tag.children.length &&\n      ! (rawAttrs && ('value' in rawAttrs))) {\n    // Provide very limited support for TEXTAREA tags with children\n    // rather than a \"value\" attribute.\n    // Reactivity in the form of Views nested in the tag's children\n    // won't work.  Compilers should compile textarea contents into\n    // the \"value\" attribute of the tag, wrapped in a function if there\n    // is reactivity.\n    if (typeof rawAttrs === 'function' ||\n        HTML.isArray(rawAttrs)) {\n      throw new Error(\"Can't have reactive children of TEXTAREA node; \" +\n                      \"use the 'value' attribute instead.\");\n    }\n    rawAttrs = _.extend({}, rawAttrs || null);\n    rawAttrs.value = Blaze._expand(children, parentView);\n    children = [];\n  }\n\n  if (rawAttrs) {\n    var attrUpdater = new ElementAttributesUpdater(elem);\n    var updateAttributes = function () {\n      var expandedAttrs = Blaze._expandAttributes(rawAttrs, parentView);\n      var flattenedAttrs = HTML.flattenAttributes(expandedAttrs);\n      var stringAttrs = {};\n      for (var attrName in flattenedAttrs) {\n        // map `null`, `undefined`, and `false` to null, which is important\n        // so that attributes with nully values are considered absent.\n        // stringify anything else (e.g. strings, booleans, numbers including 0).\n        if (flattenedAttrs[attrName] == null || flattenedAttrs[attrName] === false)\n          stringAttrs[attrName] = null;\n        else\n          stringAttrs[attrName] = Blaze._toText(flattenedAttrs[attrName],\n                                                parentView,\n                                                HTML.TEXTMODE.STRING);\n      }\n      attrUpdater.update(stringAttrs);\n    };\n    var updaterComputation;\n    if (parentView) {\n      updaterComputation =\n        parentView.autorun(updateAttributes, undefined, 'updater');\n    } else {\n      updaterComputation = Tracker.nonreactive(function () {\n        return Tracker.autorun(function () {\n          Tracker._withCurrentView(parentView, updateAttributes);\n        });\n      });\n    }\n    Blaze._DOMBackend.Teardown.onElementTeardown(elem, function attrTeardown() {\n      updaterComputation.stop();\n    });\n  }\n\n  if (children.length) {\n    var childNodesAndRanges = [];\n    // push this function first so that it's done last\n    workStack.push(function () {\n      for (var i = 0; i < childNodesAndRanges.length; i++) {\n        var x = childNodesAndRanges[i];\n        if (x instanceof Blaze._DOMRange)\n          x.attach(elem);\n        else\n          elem.appendChild(x);\n      }\n    });\n    // now push the task that calculates childNodesAndRanges\n    workStack.push(Blaze._bind(Blaze._materializeDOM, null,\n                          children, childNodesAndRanges, parentView,\n                          workStack));\n  }\n\n  return elem;\n};\n\n\nvar isSVGAnchor = function (node) {\n  // We generally aren't able to detect SVG <a> elements because\n  // if \"A\" were in our list of known svg element names, then all\n  // <a> nodes would be created using\n  // `document.createElementNS`. But in the special case of <a\n  // xlink:href=\"...\">, we can at least detect that attribute and\n  // create an SVG <a> tag in that case.\n  //\n  // However, we still have a general problem of knowing when to\n  // use document.createElementNS and when to use\n  // document.createElement; for example, font tags will always\n  // be created as SVG elements which can cause other\n  // problems. #1977\n  return (node.tagName === \"a\" &&\n          node.attrs &&\n          node.attrs[\"xlink:href\"] !== undefined);\n};\n"]},"sourceType":"module","hash":"0290782837347b40a239760bf6197e6ce6b21c44"}
