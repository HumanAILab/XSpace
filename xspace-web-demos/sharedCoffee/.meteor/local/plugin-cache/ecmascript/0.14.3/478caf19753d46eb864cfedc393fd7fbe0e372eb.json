{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/jaylin/Documents/xspace/xspace-web-demos/sharedCoffee/packages/id-map/id-map.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"packages/id-map/id-map.js","filename":"/Users/jaylin/Documents/xspace/xspace-web-demos/sharedCoffee/packages/id-map/id-map.js","passPerPreset":false,"envName":"development","cwd":"/Users/jaylin/Documents/xspace/xspace-web-demos/sharedCoffee","root":"/Users/jaylin/Documents/xspace/xspace-web-demos/sharedCoffee","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.9.2","helpers":true,"useESModules":false,"corejs":false}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":{},"_verified":{},"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/jaylin/Documents/xspace/xspace-web-demos/sharedCoffee/packages/id-map/id-map.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/id-map/id-map.js"}},"code":"module.export({\n  IdMap: () => IdMap\n});\nconst hasOwn = Object.prototype.hasOwnProperty;\n\nclass IdMap {\n  constructor(idStringify, idParse) {\n    this.clear();\n    this._idStringify = idStringify || JSON.stringify;\n    this._idParse = idParse || JSON.parse;\n  } // Some of these methods are designed to match methods on OrderedDict, since\n  // (eg) ObserveMultiplex and _CachingChangeObserver use them interchangeably.\n  // (Conceivably, this should be replaced with \"UnorderedDict\" with a specific\n  // set of methods that overlap between the two.)\n\n\n  get(id) {\n    var key = this._idStringify(id);\n\n    return this._map[key];\n  }\n\n  set(id, value) {\n    var key = this._idStringify(id);\n\n    this._map[key] = value;\n  }\n\n  remove(id) {\n    var key = this._idStringify(id);\n\n    delete this._map[key];\n  }\n\n  has(id) {\n    var key = this._idStringify(id);\n\n    return hasOwn.call(this._map, key);\n  }\n\n  empty() {\n    for (let key in this._map) {\n      return false;\n    }\n\n    return true;\n  }\n\n  clear() {\n    this._map = Object.create(null);\n  } // Iterates over the items in the map. Return `false` to break the loop.\n\n\n  forEach(iterator) {\n    // don't use _.each, because we can't break out of it.\n    var keys = Object.keys(this._map);\n\n    for (var i = 0; i < keys.length; i++) {\n      var breakIfFalse = iterator.call(null, this._map[keys[i]], this._idParse(keys[i]));\n\n      if (breakIfFalse === false) {\n        return;\n      }\n    }\n  }\n\n  size() {\n    return Object.keys(this._map).length;\n  }\n\n  setDefault(id, def) {\n    var key = this._idStringify(id);\n\n    if (hasOwn.call(this._map, key)) {\n      return this._map[key];\n    }\n\n    this._map[key] = def;\n    return def;\n  } // Assumes that values are EJSON-cloneable, and that we don't need to clone\n  // IDs (ie, that nobody is going to mutate an ObjectId).\n\n\n  clone() {\n    var clone = new IdMap(this._idStringify, this._idParse);\n    this.forEach(function (value, id) {\n      clone.set(id, EJSON.clone(value));\n    });\n    return clone;\n  }\n\n}","map":{"version":3,"sources":["packages/id-map/id-map.js"],"names":["module","export","IdMap","hasOwn","Object","prototype","hasOwnProperty","constructor","idStringify","idParse","clear","_idStringify","JSON","stringify","_idParse","parse","get","id","key","_map","set","value","remove","has","call","empty","create","forEach","iterator","keys","i","length","breakIfFalse","size","setDefault","def","clone","EJSON"],"mappings":"AAAAA,MAAM,CAACC,MAAP,CAAc;AAACC,EAAAA,KAAK,EAAC,MAAIA;AAAX,CAAd;AAAA,MAAMC,MAAM,GAAGC,MAAM,CAACC,SAAP,CAAiBC,cAAhC;;AAEO,MAAMJ,KAAN,CAAY;AACjBK,EAAAA,WAAW,CAACC,WAAD,EAAcC,OAAd,EAAuB;AAChC,SAAKC,KAAL;AACA,SAAKC,YAAL,GAAoBH,WAAW,IAAII,IAAI,CAACC,SAAxC;AACA,SAAKC,QAAL,GAAgBL,OAAO,IAAIG,IAAI,CAACG,KAAhC;AACD,GALgB,CAOnB;AACA;AACA;AACA;;;AAEEC,EAAAA,GAAG,CAACC,EAAD,EAAK;AACN,QAAIC,GAAG,GAAG,KAAKP,YAAL,CAAkBM,EAAlB,CAAV;;AACA,WAAO,KAAKE,IAAL,CAAUD,GAAV,CAAP;AACD;;AAEDE,EAAAA,GAAG,CAACH,EAAD,EAAKI,KAAL,EAAY;AACb,QAAIH,GAAG,GAAG,KAAKP,YAAL,CAAkBM,EAAlB,CAAV;;AACA,SAAKE,IAAL,CAAUD,GAAV,IAAiBG,KAAjB;AACD;;AAEDC,EAAAA,MAAM,CAACL,EAAD,EAAK;AACT,QAAIC,GAAG,GAAG,KAAKP,YAAL,CAAkBM,EAAlB,CAAV;;AACA,WAAO,KAAKE,IAAL,CAAUD,GAAV,CAAP;AACD;;AAEDK,EAAAA,GAAG,CAACN,EAAD,EAAK;AACN,QAAIC,GAAG,GAAG,KAAKP,YAAL,CAAkBM,EAAlB,CAAV;;AACA,WAAOd,MAAM,CAACqB,IAAP,CAAY,KAAKL,IAAjB,EAAuBD,GAAvB,CAAP;AACD;;AAEDO,EAAAA,KAAK,GAAG;AACN,SAAK,IAAIP,GAAT,IAAgB,KAAKC,IAArB,EAA2B;AACzB,aAAO,KAAP;AACD;;AACD,WAAO,IAAP;AACD;;AAEDT,EAAAA,KAAK,GAAG;AACN,SAAKS,IAAL,GAAYf,MAAM,CAACsB,MAAP,CAAc,IAAd,CAAZ;AACD,GAzCgB,CA2CjB;;;AACAC,EAAAA,OAAO,CAACC,QAAD,EAAW;AAChB;AACA,QAAIC,IAAI,GAAGzB,MAAM,CAACyB,IAAP,CAAY,KAAKV,IAAjB,CAAX;;AACA,SAAK,IAAIW,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,IAAI,CAACE,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AACpC,UAAIE,YAAY,GAAGJ,QAAQ,CAACJ,IAAT,CACjB,IADiB,EAEjB,KAAKL,IAAL,CAAUU,IAAI,CAACC,CAAD,CAAd,CAFiB,EAGjB,KAAKhB,QAAL,CAAce,IAAI,CAACC,CAAD,CAAlB,CAHiB,CAAnB;;AAKA,UAAIE,YAAY,KAAK,KAArB,EAA4B;AAC1B;AACD;AACF;AACF;;AAEDC,EAAAA,IAAI,GAAG;AACL,WAAO7B,MAAM,CAACyB,IAAP,CAAY,KAAKV,IAAjB,EAAuBY,MAA9B;AACD;;AAEDG,EAAAA,UAAU,CAACjB,EAAD,EAAKkB,GAAL,EAAU;AAClB,QAAIjB,GAAG,GAAG,KAAKP,YAAL,CAAkBM,EAAlB,CAAV;;AACA,QAAId,MAAM,CAACqB,IAAP,CAAY,KAAKL,IAAjB,EAAuBD,GAAvB,CAAJ,EAAiC;AAC/B,aAAO,KAAKC,IAAL,CAAUD,GAAV,CAAP;AACD;;AACD,SAAKC,IAAL,CAAUD,GAAV,IAAiBiB,GAAjB;AACA,WAAOA,GAAP;AACD,GAtEgB,CAwEjB;AACA;;;AACAC,EAAAA,KAAK,GAAG;AACN,QAAIA,KAAK,GAAG,IAAIlC,KAAJ,CAAU,KAAKS,YAAf,EAA6B,KAAKG,QAAlC,CAAZ;AACA,SAAKa,OAAL,CAAa,UAAUN,KAAV,EAAiBJ,EAAjB,EAAqB;AAChCmB,MAAAA,KAAK,CAAChB,GAAN,CAAUH,EAAV,EAAcoB,KAAK,CAACD,KAAN,CAAYf,KAAZ,CAAd;AACD,KAFD;AAGA,WAAOe,KAAP;AACD;;AAhFgB","sourcesContent":["const hasOwn = Object.prototype.hasOwnProperty;\n\nexport class IdMap {\n  constructor(idStringify, idParse) {\n    this.clear();\n    this._idStringify = idStringify || JSON.stringify;\n    this._idParse = idParse || JSON.parse;\n  }\n\n// Some of these methods are designed to match methods on OrderedDict, since\n// (eg) ObserveMultiplex and _CachingChangeObserver use them interchangeably.\n// (Conceivably, this should be replaced with \"UnorderedDict\" with a specific\n// set of methods that overlap between the two.)\n\n  get(id) {\n    var key = this._idStringify(id);\n    return this._map[key];\n  }\n\n  set(id, value) {\n    var key = this._idStringify(id);\n    this._map[key] = value;\n  }\n\n  remove(id) {\n    var key = this._idStringify(id);\n    delete this._map[key];\n  }\n\n  has(id) {\n    var key = this._idStringify(id);\n    return hasOwn.call(this._map, key);\n  }\n\n  empty() {\n    for (let key in this._map) {\n      return false;\n    }\n    return true;\n  }\n\n  clear() {\n    this._map = Object.create(null);\n  }\n\n  // Iterates over the items in the map. Return `false` to break the loop.\n  forEach(iterator) {\n    // don't use _.each, because we can't break out of it.\n    var keys = Object.keys(this._map);\n    for (var i = 0; i < keys.length; i++) {\n      var breakIfFalse = iterator.call(\n        null,\n        this._map[keys[i]],\n        this._idParse(keys[i])\n      );\n      if (breakIfFalse === false) {\n        return;\n      }\n    }\n  }\n\n  size() {\n    return Object.keys(this._map).length;\n  }\n\n  setDefault(id, def) {\n    var key = this._idStringify(id);\n    if (hasOwn.call(this._map, key)) {\n      return this._map[key];\n    }\n    this._map[key] = def;\n    return def;\n  }\n\n  // Assumes that values are EJSON-cloneable, and that we don't need to clone\n  // IDs (ie, that nobody is going to mutate an ObjectId).\n  clone() {\n    var clone = new IdMap(this._idStringify, this._idParse);\n    this.forEach(function (value, id) {\n      clone.set(id, EJSON.clone(value));\n    });\n    return clone;\n  }\n}\n"]},"sourceType":"module","hash":"478caf19753d46eb864cfedc393fd7fbe0e372eb"}
