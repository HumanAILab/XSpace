{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/jaylin/Documents/xspace/xspace-web-demos/sharedCoffee/packages/autoupdate/autoupdate_server.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"packages/autoupdate/autoupdate_server.js","filename":"/Users/jaylin/Documents/xspace/xspace-web-demos/sharedCoffee/packages/autoupdate/autoupdate_server.js","passPerPreset":false,"envName":"development","cwd":"/Users/jaylin/Documents/xspace/xspace-web-demos/sharedCoffee","root":"/Users/jaylin/Documents/xspace/xspace-web-demos/sharedCoffee","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.9.2","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":{},"_verified":{},"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/jaylin/Documents/xspace/xspace-web-demos/sharedCoffee/packages/autoupdate/autoupdate_server.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/autoupdate/autoupdate_server.js"}},"code":"let _objectSpread;\n\nmodule.link(\"@babel/runtime/helpers/objectSpread2\", {\n  default(v) {\n    _objectSpread = v;\n  }\n\n}, 0);\nmodule.export({\n  Autoupdate: () => Autoupdate\n});\nlet ClientVersions;\nmodule.link(\"./client_versions.js\", {\n  ClientVersions(v) {\n    ClientVersions = v;\n  }\n\n}, 0);\nlet onMessage;\nmodule.link(\"meteor/inter-process-messaging\", {\n  onMessage(v) {\n    onMessage = v;\n  }\n\n}, 1);\n\nvar Future = Npm.require(\"fibers/future\");\n\nconst Autoupdate = __meteor_runtime_config__.autoupdate = {\n  // Map from client architectures (web.browser, web.browser.legacy,\n  // web.cordova) to version fields { version, versionRefreshable,\n  // versionNonRefreshable, refreshable } that will be stored in\n  // ClientVersions documents (whose IDs are client architectures). This\n  // data gets serialized into the boilerplate because it's stored in\n  // __meteor_runtime_config__.autoupdate.versions.\n  versions: {}\n};\n// Stores acceptable client versions.\nconst clientVersions = new ClientVersions(); // The client hash includes __meteor_runtime_config__, so wait until\n// all packages have loaded and have had a chance to populate the\n// runtime config before using the client hash as our default auto\n// update version id.\n// Note: Tests allow people to override Autoupdate.autoupdateVersion before\n// startup.\n\nAutoupdate.autoupdateVersion = null;\nAutoupdate.autoupdateVersionRefreshable = null;\nAutoupdate.autoupdateVersionCordova = null;\nAutoupdate.appId = __meteor_runtime_config__.appId = process.env.APP_ID;\nvar syncQueue = new Meteor._SynchronousQueue();\n\nfunction updateVersions(shouldReloadClientProgram) {\n  // Step 1: load the current client program on the server\n  if (shouldReloadClientProgram) {\n    WebAppInternals.reloadClientPrograms();\n  }\n\n  const {\n    // If the AUTOUPDATE_VERSION environment variable is defined, it takes\n    // precedence, but Autoupdate.autoupdateVersion is still supported as\n    // a fallback. In most cases neither of these values will be defined.\n    AUTOUPDATE_VERSION = Autoupdate.autoupdateVersion\n  } = process.env; // Step 2: update __meteor_runtime_config__.autoupdate.versions.\n\n  const clientArchs = Object.keys(WebApp.clientPrograms);\n  clientArchs.forEach(arch => {\n    Autoupdate.versions[arch] = {\n      version: AUTOUPDATE_VERSION || WebApp.calculateClientHash(arch),\n      versionRefreshable: AUTOUPDATE_VERSION || WebApp.calculateClientHashRefreshable(arch),\n      versionNonRefreshable: AUTOUPDATE_VERSION || WebApp.calculateClientHashNonRefreshable(arch)\n    };\n  }); // Step 3: form the new client boilerplate which contains the updated\n  // assets and __meteor_runtime_config__.\n\n  if (shouldReloadClientProgram) {\n    WebAppInternals.generateBoilerplate();\n  } // Step 4: update the ClientVersions collection.\n  // We use `onListening` here because we need to use\n  // `WebApp.getRefreshableAssets`, which is only set after\n  // `WebApp.generateBoilerplate` is called by `main` in webapp.\n\n\n  WebApp.onListening(() => {\n    clientArchs.forEach(arch => {\n      const payload = _objectSpread({}, Autoupdate.versions[arch], {\n        assets: WebApp.getRefreshableAssets(arch)\n      });\n\n      clientVersions.set(arch, payload);\n    });\n  });\n}\n\nMeteor.publish(\"meteor_autoupdate_clientVersions\", function (appId) {\n  // `null` happens when a client doesn't have an appId and passes\n  // `undefined` to `Meteor.subscribe`. `undefined` is translated to\n  // `null` as JSON doesn't have `undefined.\n  check(appId, Match.OneOf(String, undefined, null)); // Don't notify clients using wrong appId such as mobile apps built with a\n  // different server but pointing at the same local url\n\n  if (Autoupdate.appId && appId && Autoupdate.appId !== appId) return [];\n  const stop = clientVersions.watch((version, isNew) => {\n    (isNew ? this.added : this.changed).call(this, \"meteor_autoupdate_clientVersions\", version._id, version);\n  });\n  this.onStop(() => stop());\n  this.ready();\n}, {\n  is_auto: true\n});\nMeteor.startup(function () {\n  updateVersions(false); // Force any connected clients that are still looking for these older\n  // document IDs to reload.\n\n  [\"version\", \"version-refreshable\", \"version-cordova\"].forEach(_id => {\n    clientVersions.set(_id, {\n      version: \"outdated\"\n    });\n  });\n});\nvar fut = new Future(); // We only want 'refresh' to trigger 'updateVersions' AFTER onListen,\n// so we add a queued task that waits for onListen before 'refresh' can queue\n// tasks. Note that the `onListening` callbacks do not fire until after\n// Meteor.startup, so there is no concern that the 'updateVersions' calls from\n// 'refresh' will overlap with the `updateVersions` call from Meteor.startup.\n\nsyncQueue.queueTask(function () {\n  fut.wait();\n});\nWebApp.onListening(function () {\n  fut.return();\n});\n\nfunction enqueueVersionsRefresh() {\n  syncQueue.queueTask(function () {\n    updateVersions(true);\n  });\n} // Listen for messages pertaining to the client-refresh topic.\n\n\nonMessage(\"client-refresh\", enqueueVersionsRefresh); // Another way to tell the process to refresh: send SIGHUP signal\n\nprocess.on('SIGHUP', Meteor.bindEnvironment(function () {\n  enqueueVersionsRefresh();\n}, \"handling SIGHUP signal for refresh\"));","map":{"version":3,"sources":["packages/autoupdate/autoupdate_server.js"],"names":["_objectSpread","module","link","default","v","export","Autoupdate","ClientVersions","onMessage","Future","Npm","require","__meteor_runtime_config__","autoupdate","versions","clientVersions","autoupdateVersion","autoupdateVersionRefreshable","autoupdateVersionCordova","appId","process","env","APP_ID","syncQueue","Meteor","_SynchronousQueue","updateVersions","shouldReloadClientProgram","WebAppInternals","reloadClientPrograms","AUTOUPDATE_VERSION","clientArchs","Object","keys","WebApp","clientPrograms","forEach","arch","version","calculateClientHash","versionRefreshable","calculateClientHashRefreshable","versionNonRefreshable","calculateClientHashNonRefreshable","generateBoilerplate","onListening","payload","assets","getRefreshableAssets","set","publish","check","Match","OneOf","String","undefined","stop","watch","isNew","added","changed","call","_id","onStop","ready","is_auto","startup","fut","queueTask","wait","return","enqueueVersionsRefresh","on","bindEnvironment"],"mappings":"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","sourcesContent":["// Publish the current client versions for each client architecture\n// (web.browser, web.browser.legacy, web.cordova). When a client observes\n// a change in the versions associated with its client architecture,\n// it will refresh itself, either by swapping out CSS assets or by\n// reloading the page.\n//\n// There are three versions for any given client architecture: `version`,\n// `versionRefreshable`, and `versionNonRefreshable`. The refreshable\n// version is a hash of just the client resources that are refreshable,\n// such as CSS, while the non-refreshable version is a hash of the rest of\n// the client assets, excluding the refreshable ones: HTML, JS, and static\n// files in the `public` directory. The `version` version is a combined\n// hash of everything.\n//\n// If the environment variable `AUTOUPDATE_VERSION` is set, it will be\n// used in place of all client versions. You can use this variable to\n// control when the client reloads. For example, if you want to force a\n// reload only after major changes, use a custom AUTOUPDATE_VERSION and\n// change it only when something worth pushing to clients happens.\n//\n// The server publishes a `meteor_autoupdate_clientVersions` collection.\n// The ID of each document is the client architecture, and the fields of\n// the document are the versions described above.\n\nimport { ClientVersions } from \"./client_versions.js\";\nvar Future = Npm.require(\"fibers/future\");\n\nexport const Autoupdate = __meteor_runtime_config__.autoupdate = {\n  // Map from client architectures (web.browser, web.browser.legacy,\n  // web.cordova) to version fields { version, versionRefreshable,\n  // versionNonRefreshable, refreshable } that will be stored in\n  // ClientVersions documents (whose IDs are client architectures). This\n  // data gets serialized into the boilerplate because it's stored in\n  // __meteor_runtime_config__.autoupdate.versions.\n  versions: {}\n};\n\n// Stores acceptable client versions.\nconst clientVersions = new ClientVersions();\n\n// The client hash includes __meteor_runtime_config__, so wait until\n// all packages have loaded and have had a chance to populate the\n// runtime config before using the client hash as our default auto\n// update version id.\n\n// Note: Tests allow people to override Autoupdate.autoupdateVersion before\n// startup.\nAutoupdate.autoupdateVersion = null;\nAutoupdate.autoupdateVersionRefreshable = null;\nAutoupdate.autoupdateVersionCordova = null;\nAutoupdate.appId = __meteor_runtime_config__.appId = process.env.APP_ID;\n\nvar syncQueue = new Meteor._SynchronousQueue();\n\nfunction updateVersions(shouldReloadClientProgram) {\n  // Step 1: load the current client program on the server\n  if (shouldReloadClientProgram) {\n    WebAppInternals.reloadClientPrograms();\n  }\n\n  const {\n    // If the AUTOUPDATE_VERSION environment variable is defined, it takes\n    // precedence, but Autoupdate.autoupdateVersion is still supported as\n    // a fallback. In most cases neither of these values will be defined.\n    AUTOUPDATE_VERSION = Autoupdate.autoupdateVersion\n  } = process.env;\n\n  // Step 2: update __meteor_runtime_config__.autoupdate.versions.\n  const clientArchs = Object.keys(WebApp.clientPrograms);\n  clientArchs.forEach(arch => {\n    Autoupdate.versions[arch] = {\n      version: AUTOUPDATE_VERSION ||\n        WebApp.calculateClientHash(arch),\n      versionRefreshable: AUTOUPDATE_VERSION ||\n        WebApp.calculateClientHashRefreshable(arch),\n      versionNonRefreshable: AUTOUPDATE_VERSION ||\n        WebApp.calculateClientHashNonRefreshable(arch),\n    };\n  });\n\n  // Step 3: form the new client boilerplate which contains the updated\n  // assets and __meteor_runtime_config__.\n  if (shouldReloadClientProgram) {\n    WebAppInternals.generateBoilerplate();\n  }\n\n  // Step 4: update the ClientVersions collection.\n  // We use `onListening` here because we need to use\n  // `WebApp.getRefreshableAssets`, which is only set after\n  // `WebApp.generateBoilerplate` is called by `main` in webapp.\n  WebApp.onListening(() => {\n    clientArchs.forEach(arch => {\n      const payload = {\n        ...Autoupdate.versions[arch],\n        assets: WebApp.getRefreshableAssets(arch),\n      };\n\n      clientVersions.set(arch, payload);\n    });\n  });\n}\n\nMeteor.publish(\n  \"meteor_autoupdate_clientVersions\",\n  function (appId) {\n    // `null` happens when a client doesn't have an appId and passes\n    // `undefined` to `Meteor.subscribe`. `undefined` is translated to\n    // `null` as JSON doesn't have `undefined.\n    check(appId, Match.OneOf(String, undefined, null));\n\n    // Don't notify clients using wrong appId such as mobile apps built with a\n    // different server but pointing at the same local url\n    if (Autoupdate.appId && appId && Autoupdate.appId !== appId)\n      return [];\n\n    const stop = clientVersions.watch((version, isNew) => {\n      (isNew ? this.added : this.changed)\n        .call(this, \"meteor_autoupdate_clientVersions\", version._id, version);\n    });\n\n    this.onStop(() => stop());\n    this.ready();\n  },\n  {is_auto: true}\n);\n\nMeteor.startup(function () {\n  updateVersions(false);\n\n  // Force any connected clients that are still looking for these older\n  // document IDs to reload.\n  [\"version\",\n   \"version-refreshable\",\n   \"version-cordova\",\n  ].forEach(_id => {\n    clientVersions.set(_id, {\n      version: \"outdated\"\n    });\n  });\n});\n\nvar fut = new Future();\n\n// We only want 'refresh' to trigger 'updateVersions' AFTER onListen,\n// so we add a queued task that waits for onListen before 'refresh' can queue\n// tasks. Note that the `onListening` callbacks do not fire until after\n// Meteor.startup, so there is no concern that the 'updateVersions' calls from\n// 'refresh' will overlap with the `updateVersions` call from Meteor.startup.\n\nsyncQueue.queueTask(function () {\n  fut.wait();\n});\n\nWebApp.onListening(function () {\n  fut.return();\n});\n\nfunction enqueueVersionsRefresh() {\n  syncQueue.queueTask(function () {\n    updateVersions(true);\n  });\n}\n\n// Listen for messages pertaining to the client-refresh topic.\nimport { onMessage } from \"meteor/inter-process-messaging\";\nonMessage(\"client-refresh\", enqueueVersionsRefresh);\n\n// Another way to tell the process to refresh: send SIGHUP signal\nprocess.on('SIGHUP', Meteor.bindEnvironment(function () {\n  enqueueVersionsRefresh();\n}, \"handling SIGHUP signal for refresh\"));\n"]},"sourceType":"module","hash":"f5214254976b19293851f6eb1446b61270bd5d61"}
