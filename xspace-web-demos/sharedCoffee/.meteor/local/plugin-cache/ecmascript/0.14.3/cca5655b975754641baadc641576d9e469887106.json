{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/jaylin/Documents/xspace/xspace-web-demos/sharedCoffee/packages/blaze/builtins.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"packages/blaze/builtins.js","filename":"/Users/jaylin/Documents/xspace/xspace-web-demos/sharedCoffee/packages/blaze/builtins.js","passPerPreset":false,"envName":"development","cwd":"/Users/jaylin/Documents/xspace/xspace-web-demos/sharedCoffee","root":"/Users/jaylin/Documents/xspace/xspace-web-demos/sharedCoffee","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.9.2","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":{},"_verified":{},"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/jaylin/Documents/xspace/xspace-web-demos/sharedCoffee/packages/blaze/builtins.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/blaze/builtins.js"}},"code":"Blaze._calculateCondition = function (cond) {\n  if (cond instanceof Array && cond.length === 0) cond = false;\n  return !!cond;\n};\n/**\n * @summary Constructs a View that renders content with a data context.\n * @locus Client\n * @param {Object|Function} data An object to use as the data context, or a function returning such an object.  If a function is provided, it will be reactively re-run.\n * @param {Function} contentFunc A Function that returns [*renderable content*](#Renderable-Content).\n */\n\n\nBlaze.With = function (data, contentFunc) {\n  var view = Blaze.View('with', contentFunc);\n  view.dataVar = new ReactiveVar();\n  view.onViewCreated(function () {\n    if (typeof data === 'function') {\n      // `data` is a reactive function\n      view.autorun(function () {\n        view.dataVar.set(data());\n      }, view.parentView, 'setData');\n    } else {\n      view.dataVar.set(data);\n    }\n  });\n  return view;\n};\n/**\n * Attaches bindings to the instantiated view.\n * @param {Object} bindings A dictionary of bindings, each binding name\n * corresponds to a value or a function that will be reactively re-run.\n * @param {View} view The target.\n */\n\n\nBlaze._attachBindingsToView = function (bindings, view) {\n  view.onViewCreated(function () {\n    _.each(bindings, function (binding, name) {\n      view._scopeBindings[name] = new ReactiveVar();\n\n      if (typeof binding === 'function') {\n        view.autorun(function () {\n          view._scopeBindings[name].set(binding());\n        }, view.parentView);\n      } else {\n        view._scopeBindings[name].set(binding);\n      }\n    });\n  });\n};\n/**\n * @summary Constructs a View setting the local lexical scope in the block.\n * @param {Function} bindings Dictionary mapping names of bindings to\n * values or computations to reactively re-run.\n * @param {Function} contentFunc A Function that returns [*renderable content*](#Renderable-Content).\n */\n\n\nBlaze.Let = function (bindings, contentFunc) {\n  var view = Blaze.View('let', contentFunc);\n\n  Blaze._attachBindingsToView(bindings, view);\n\n  return view;\n};\n/**\n * @summary Constructs a View that renders content conditionally.\n * @locus Client\n * @param {Function} conditionFunc A function to reactively re-run.  Whether the result is truthy or falsy determines whether `contentFunc` or `elseFunc` is shown.  An empty array is considered falsy.\n * @param {Function} contentFunc A Function that returns [*renderable content*](#Renderable-Content).\n * @param {Function} [elseFunc] Optional.  A Function that returns [*renderable content*](#Renderable-Content).  If no `elseFunc` is supplied, no content is shown in the \"else\" case.\n */\n\n\nBlaze.If = function (conditionFunc, contentFunc, elseFunc, _not) {\n  var conditionVar = new ReactiveVar();\n  var view = Blaze.View(_not ? 'unless' : 'if', function () {\n    return conditionVar.get() ? contentFunc() : elseFunc ? elseFunc() : null;\n  });\n  view.__conditionVar = conditionVar;\n  view.onViewCreated(function () {\n    this.autorun(function () {\n      var cond = Blaze._calculateCondition(conditionFunc());\n\n      conditionVar.set(_not ? !cond : cond);\n    }, this.parentView, 'condition');\n  });\n  return view;\n};\n/**\n * @summary An inverted [`Blaze.If`](#Blaze-If).\n * @locus Client\n * @param {Function} conditionFunc A function to reactively re-run.  If the result is falsy, `contentFunc` is shown, otherwise `elseFunc` is shown.  An empty array is considered falsy.\n * @param {Function} contentFunc A Function that returns [*renderable content*](#Renderable-Content).\n * @param {Function} [elseFunc] Optional.  A Function that returns [*renderable content*](#Renderable-Content).  If no `elseFunc` is supplied, no content is shown in the \"else\" case.\n */\n\n\nBlaze.Unless = function (conditionFunc, contentFunc, elseFunc) {\n  return Blaze.If(conditionFunc, contentFunc, elseFunc, true\n  /*_not*/\n  );\n};\n/**\n * @summary Constructs a View that renders `contentFunc` for each item in a sequence.\n * @locus Client\n * @param {Function} argFunc A function to reactively re-run. The function can\n * return one of two options:\n *\n * 1. An object with two fields: '_variable' and '_sequence'. Each iterates over\n *   '_sequence', it may be a Cursor, an array, null, or undefined. Inside the\n *   Each body you will be able to get the current item from the sequence using\n *   the name specified in the '_variable' field.\n *\n * 2. Just a sequence (Cursor, array, null, or undefined) not wrapped into an\n *   object. Inside the Each body, the current item will be set as the data\n *   context.\n * @param {Function} contentFunc A Function that returns  [*renderable\n * content*](#Renderable-Content).\n * @param {Function} [elseFunc] A Function that returns [*renderable\n * content*](#Renderable-Content) to display in the case when there are no items\n * in the sequence.\n */\n\n\nBlaze.Each = function (argFunc, contentFunc, elseFunc) {\n  var eachView = Blaze.View('each', function () {\n    var subviews = this.initialSubviews;\n    this.initialSubviews = null;\n\n    if (this._isCreatedForExpansion) {\n      this.expandedValueDep = new Tracker.Dependency();\n      this.expandedValueDep.depend();\n    }\n\n    return subviews;\n  });\n  eachView.initialSubviews = [];\n  eachView.numItems = 0;\n  eachView.inElseMode = false;\n  eachView.stopHandle = null;\n  eachView.contentFunc = contentFunc;\n  eachView.elseFunc = elseFunc;\n  eachView.argVar = new ReactiveVar();\n  eachView.variableName = null; // update the @index value in the scope of all subviews in the range\n\n  var updateIndices = function (from, to) {\n    if (to === undefined) {\n      to = eachView.numItems - 1;\n    }\n\n    for (var i = from; i <= to; i++) {\n      var view = eachView._domrange.members[i].view;\n\n      view._scopeBindings['@index'].set(i);\n    }\n  };\n\n  eachView.onViewCreated(function () {\n    // We evaluate argFunc in an autorun to make sure\n    // Blaze.currentView is always set when it runs (rather than\n    // passing argFunc straight to ObserveSequence).\n    eachView.autorun(function () {\n      // argFunc can return either a sequence as is or a wrapper object with a\n      // _sequence and _variable fields set.\n      var arg = argFunc();\n\n      if (_.isObject(arg) && _.has(arg, '_sequence')) {\n        eachView.variableName = arg._variable || null;\n        arg = arg._sequence;\n      }\n\n      eachView.argVar.set(arg);\n    }, eachView.parentView, 'collection');\n    eachView.stopHandle = ObserveSequence.observe(function () {\n      return eachView.argVar.get();\n    }, {\n      addedAt: function (id, item, index) {\n        Tracker.nonreactive(function () {\n          var newItemView;\n\n          if (eachView.variableName) {\n            // new-style #each (as in {{#each item in items}})\n            // doesn't create a new data context\n            newItemView = Blaze.View('item', eachView.contentFunc);\n          } else {\n            newItemView = Blaze.With(item, eachView.contentFunc);\n          }\n\n          eachView.numItems++;\n          var bindings = {};\n          bindings['@index'] = index;\n\n          if (eachView.variableName) {\n            bindings[eachView.variableName] = item;\n          }\n\n          Blaze._attachBindingsToView(bindings, newItemView);\n\n          if (eachView.expandedValueDep) {\n            eachView.expandedValueDep.changed();\n          } else if (eachView._domrange) {\n            if (eachView.inElseMode) {\n              eachView._domrange.removeMember(0);\n\n              eachView.inElseMode = false;\n            }\n\n            var range = Blaze._materializeView(newItemView, eachView);\n\n            eachView._domrange.addMember(range, index);\n\n            updateIndices(index);\n          } else {\n            eachView.initialSubviews.splice(index, 0, newItemView);\n          }\n        });\n      },\n      removedAt: function (id, item, index) {\n        Tracker.nonreactive(function () {\n          eachView.numItems--;\n\n          if (eachView.expandedValueDep) {\n            eachView.expandedValueDep.changed();\n          } else if (eachView._domrange) {\n            eachView._domrange.removeMember(index);\n\n            updateIndices(index);\n\n            if (eachView.elseFunc && eachView.numItems === 0) {\n              eachView.inElseMode = true;\n\n              eachView._domrange.addMember(Blaze._materializeView(Blaze.View('each_else', eachView.elseFunc), eachView), 0);\n            }\n          } else {\n            eachView.initialSubviews.splice(index, 1);\n          }\n        });\n      },\n      changedAt: function (id, newItem, oldItem, index) {\n        Tracker.nonreactive(function () {\n          if (eachView.expandedValueDep) {\n            eachView.expandedValueDep.changed();\n          } else {\n            var itemView;\n\n            if (eachView._domrange) {\n              itemView = eachView._domrange.getMember(index).view;\n            } else {\n              itemView = eachView.initialSubviews[index];\n            }\n\n            if (eachView.variableName) {\n              itemView._scopeBindings[eachView.variableName].set(newItem);\n            } else {\n              itemView.dataVar.set(newItem);\n            }\n          }\n        });\n      },\n      movedTo: function (id, item, fromIndex, toIndex) {\n        Tracker.nonreactive(function () {\n          if (eachView.expandedValueDep) {\n            eachView.expandedValueDep.changed();\n          } else if (eachView._domrange) {\n            eachView._domrange.moveMember(fromIndex, toIndex);\n\n            updateIndices(Math.min(fromIndex, toIndex), Math.max(fromIndex, toIndex));\n          } else {\n            var subviews = eachView.initialSubviews;\n            var itemView = subviews[fromIndex];\n            subviews.splice(fromIndex, 1);\n            subviews.splice(toIndex, 0, itemView);\n          }\n        });\n      }\n    });\n\n    if (eachView.elseFunc && eachView.numItems === 0) {\n      eachView.inElseMode = true;\n      eachView.initialSubviews[0] = Blaze.View('each_else', eachView.elseFunc);\n    }\n  });\n  eachView.onViewDestroyed(function () {\n    if (eachView.stopHandle) eachView.stopHandle.stop();\n  });\n  return eachView;\n};\n\nBlaze._TemplateWith = function (arg, contentFunc) {\n  var w;\n  var argFunc = arg;\n\n  if (typeof arg !== 'function') {\n    argFunc = function () {\n      return arg;\n    };\n  } // This is a little messy.  When we compile `{{> Template.contentBlock}}`, we\n  // wrap it in Blaze._InOuterTemplateScope in order to skip the intermediate\n  // parent Views in the current template.  However, when there's an argument\n  // (`{{> Template.contentBlock arg}}`), the argument needs to be evaluated\n  // in the original scope.  There's no good order to nest\n  // Blaze._InOuterTemplateScope and Spacebars.TemplateWith to achieve this,\n  // so we wrap argFunc to run it in the \"original parentView\" of the\n  // Blaze._InOuterTemplateScope.\n  //\n  // To make this better, reconsider _InOuterTemplateScope as a primitive.\n  // Longer term, evaluate expressions in the proper lexical scope.\n\n\n  var wrappedArgFunc = function () {\n    var viewToEvaluateArg = null;\n\n    if (w.parentView && w.parentView.name === 'InOuterTemplateScope') {\n      viewToEvaluateArg = w.parentView.originalParentView;\n    }\n\n    if (viewToEvaluateArg) {\n      return Blaze._withCurrentView(viewToEvaluateArg, argFunc);\n    } else {\n      return argFunc();\n    }\n  };\n\n  var wrappedContentFunc = function () {\n    var content = contentFunc.call(this); // Since we are generating the Blaze._TemplateWith view for the\n    // user, set the flag on the child view.  If `content` is a template,\n    // construct the View so that we can set the flag.\n\n    if (content instanceof Blaze.Template) {\n      content = content.constructView();\n    }\n\n    if (content instanceof Blaze.View) {\n      content._hasGeneratedParent = true;\n    }\n\n    return content;\n  };\n\n  w = Blaze.With(wrappedArgFunc, wrappedContentFunc);\n  w.__isTemplateWith = true;\n  return w;\n};\n\nBlaze._InOuterTemplateScope = function (templateView, contentFunc) {\n  var view = Blaze.View('InOuterTemplateScope', contentFunc);\n  var parentView = templateView.parentView; // Hack so that if you call `{{> foo bar}}` and it expands into\n  // `{{#with bar}}{{> foo}}{{/with}}`, and then `foo` is a template\n  // that inserts `{{> Template.contentBlock}}`, the data context for\n  // `Template.contentBlock` is not `bar` but the one enclosing that.\n\n  if (parentView.__isTemplateWith) parentView = parentView.parentView;\n  view.onViewCreated(function () {\n    this.originalParentView = this.parentView;\n    this.parentView = parentView;\n    this.__childDoesntStartNewLexicalScope = true;\n  });\n  return view;\n}; // XXX COMPAT WITH 0.9.0\n\n\nBlaze.InOuterTemplateScope = Blaze._InOuterTemplateScope;","map":{"version":3,"sources":["packages/blaze/builtins.js"],"names":["Blaze","_calculateCondition","cond","Array","length","With","data","contentFunc","view","View","dataVar","ReactiveVar","onViewCreated","autorun","set","parentView","_attachBindingsToView","bindings","_","each","binding","name","_scopeBindings","Let","If","conditionFunc","elseFunc","_not","conditionVar","get","__conditionVar","Unless","Each","argFunc","eachView","subviews","initialSubviews","_isCreatedForExpansion","expandedValueDep","Tracker","Dependency","depend","numItems","inElseMode","stopHandle","argVar","variableName","updateIndices","from","to","undefined","i","_domrange","members","arg","isObject","has","_variable","_sequence","ObserveSequence","observe","addedAt","id","item","index","nonreactive","newItemView","changed","removeMember","range","_materializeView","addMember","splice","removedAt","changedAt","newItem","oldItem","itemView","getMember","movedTo","fromIndex","toIndex","moveMember","Math","min","max","onViewDestroyed","stop","_TemplateWith","w","wrappedArgFunc","viewToEvaluateArg","originalParentView","_withCurrentView","wrappedContentFunc","content","call","Template","constructView","_hasGeneratedParent","__isTemplateWith","_InOuterTemplateScope","templateView","__childDoesntStartNewLexicalScope","InOuterTemplateScope"],"mappings":"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","sourcesContent":["Blaze._calculateCondition = function (cond) {\n  if (cond instanceof Array && cond.length === 0)\n    cond = false;\n  return !! cond;\n};\n\n/**\n * @summary Constructs a View that renders content with a data context.\n * @locus Client\n * @param {Object|Function} data An object to use as the data context, or a function returning such an object.  If a function is provided, it will be reactively re-run.\n * @param {Function} contentFunc A Function that returns [*renderable content*](#Renderable-Content).\n */\nBlaze.With = function (data, contentFunc) {\n  var view = Blaze.View('with', contentFunc);\n\n  view.dataVar = new ReactiveVar;\n\n  view.onViewCreated(function () {\n    if (typeof data === 'function') {\n      // `data` is a reactive function\n      view.autorun(function () {\n        view.dataVar.set(data());\n      }, view.parentView, 'setData');\n    } else {\n      view.dataVar.set(data);\n    }\n  });\n\n  return view;\n};\n\n/**\n * Attaches bindings to the instantiated view.\n * @param {Object} bindings A dictionary of bindings, each binding name\n * corresponds to a value or a function that will be reactively re-run.\n * @param {View} view The target.\n */\nBlaze._attachBindingsToView = function (bindings, view) {\n  view.onViewCreated(function () {\n    _.each(bindings, function (binding, name) {\n      view._scopeBindings[name] = new ReactiveVar;\n      if (typeof binding === 'function') {\n        view.autorun(function () {\n          view._scopeBindings[name].set(binding());\n        }, view.parentView);\n      } else {\n        view._scopeBindings[name].set(binding);\n      }\n    });\n  });\n};\n\n/**\n * @summary Constructs a View setting the local lexical scope in the block.\n * @param {Function} bindings Dictionary mapping names of bindings to\n * values or computations to reactively re-run.\n * @param {Function} contentFunc A Function that returns [*renderable content*](#Renderable-Content).\n */\nBlaze.Let = function (bindings, contentFunc) {\n  var view = Blaze.View('let', contentFunc);\n  Blaze._attachBindingsToView(bindings, view);\n\n  return view;\n};\n\n/**\n * @summary Constructs a View that renders content conditionally.\n * @locus Client\n * @param {Function} conditionFunc A function to reactively re-run.  Whether the result is truthy or falsy determines whether `contentFunc` or `elseFunc` is shown.  An empty array is considered falsy.\n * @param {Function} contentFunc A Function that returns [*renderable content*](#Renderable-Content).\n * @param {Function} [elseFunc] Optional.  A Function that returns [*renderable content*](#Renderable-Content).  If no `elseFunc` is supplied, no content is shown in the \"else\" case.\n */\nBlaze.If = function (conditionFunc, contentFunc, elseFunc, _not) {\n  var conditionVar = new ReactiveVar;\n\n  var view = Blaze.View(_not ? 'unless' : 'if', function () {\n    return conditionVar.get() ? contentFunc() :\n      (elseFunc ? elseFunc() : null);\n  });\n  view.__conditionVar = conditionVar;\n  view.onViewCreated(function () {\n    this.autorun(function () {\n      var cond = Blaze._calculateCondition(conditionFunc());\n      conditionVar.set(_not ? (! cond) : cond);\n    }, this.parentView, 'condition');\n  });\n\n  return view;\n};\n\n/**\n * @summary An inverted [`Blaze.If`](#Blaze-If).\n * @locus Client\n * @param {Function} conditionFunc A function to reactively re-run.  If the result is falsy, `contentFunc` is shown, otherwise `elseFunc` is shown.  An empty array is considered falsy.\n * @param {Function} contentFunc A Function that returns [*renderable content*](#Renderable-Content).\n * @param {Function} [elseFunc] Optional.  A Function that returns [*renderable content*](#Renderable-Content).  If no `elseFunc` is supplied, no content is shown in the \"else\" case.\n */\nBlaze.Unless = function (conditionFunc, contentFunc, elseFunc) {\n  return Blaze.If(conditionFunc, contentFunc, elseFunc, true /*_not*/);\n};\n\n/**\n * @summary Constructs a View that renders `contentFunc` for each item in a sequence.\n * @locus Client\n * @param {Function} argFunc A function to reactively re-run. The function can\n * return one of two options:\n *\n * 1. An object with two fields: '_variable' and '_sequence'. Each iterates over\n *   '_sequence', it may be a Cursor, an array, null, or undefined. Inside the\n *   Each body you will be able to get the current item from the sequence using\n *   the name specified in the '_variable' field.\n *\n * 2. Just a sequence (Cursor, array, null, or undefined) not wrapped into an\n *   object. Inside the Each body, the current item will be set as the data\n *   context.\n * @param {Function} contentFunc A Function that returns  [*renderable\n * content*](#Renderable-Content).\n * @param {Function} [elseFunc] A Function that returns [*renderable\n * content*](#Renderable-Content) to display in the case when there are no items\n * in the sequence.\n */\nBlaze.Each = function (argFunc, contentFunc, elseFunc) {\n  var eachView = Blaze.View('each', function () {\n    var subviews = this.initialSubviews;\n    this.initialSubviews = null;\n    if (this._isCreatedForExpansion) {\n      this.expandedValueDep = new Tracker.Dependency;\n      this.expandedValueDep.depend();\n    }\n    return subviews;\n  });\n  eachView.initialSubviews = [];\n  eachView.numItems = 0;\n  eachView.inElseMode = false;\n  eachView.stopHandle = null;\n  eachView.contentFunc = contentFunc;\n  eachView.elseFunc = elseFunc;\n  eachView.argVar = new ReactiveVar;\n  eachView.variableName = null;\n\n  // update the @index value in the scope of all subviews in the range\n  var updateIndices = function (from, to) {\n    if (to === undefined) {\n      to = eachView.numItems - 1;\n    }\n\n    for (var i = from; i <= to; i++) {\n      var view = eachView._domrange.members[i].view;\n      view._scopeBindings['@index'].set(i);\n    }\n  };\n\n  eachView.onViewCreated(function () {\n    // We evaluate argFunc in an autorun to make sure\n    // Blaze.currentView is always set when it runs (rather than\n    // passing argFunc straight to ObserveSequence).\n    eachView.autorun(function () {\n      // argFunc can return either a sequence as is or a wrapper object with a\n      // _sequence and _variable fields set.\n      var arg = argFunc();\n      if (_.isObject(arg) && _.has(arg, '_sequence')) {\n        eachView.variableName = arg._variable || null;\n        arg = arg._sequence;\n      }\n\n      eachView.argVar.set(arg);\n    }, eachView.parentView, 'collection');\n\n    eachView.stopHandle = ObserveSequence.observe(function () {\n      return eachView.argVar.get();\n    }, {\n      addedAt: function (id, item, index) {\n        Tracker.nonreactive(function () {\n          var newItemView;\n          if (eachView.variableName) {\n            // new-style #each (as in {{#each item in items}})\n            // doesn't create a new data context\n            newItemView = Blaze.View('item', eachView.contentFunc);\n          } else {\n            newItemView = Blaze.With(item, eachView.contentFunc);\n          }\n\n          eachView.numItems++;\n\n          var bindings = {};\n          bindings['@index'] = index;\n          if (eachView.variableName) {\n            bindings[eachView.variableName] = item;\n          }\n          Blaze._attachBindingsToView(bindings, newItemView);\n\n          if (eachView.expandedValueDep) {\n            eachView.expandedValueDep.changed();\n          } else if (eachView._domrange) {\n            if (eachView.inElseMode) {\n              eachView._domrange.removeMember(0);\n              eachView.inElseMode = false;\n            }\n\n            var range = Blaze._materializeView(newItemView, eachView);\n            eachView._domrange.addMember(range, index);\n            updateIndices(index);\n          } else {\n            eachView.initialSubviews.splice(index, 0, newItemView);\n          }\n        });\n      },\n      removedAt: function (id, item, index) {\n        Tracker.nonreactive(function () {\n          eachView.numItems--;\n          if (eachView.expandedValueDep) {\n            eachView.expandedValueDep.changed();\n          } else if (eachView._domrange) {\n            eachView._domrange.removeMember(index);\n            updateIndices(index);\n            if (eachView.elseFunc && eachView.numItems === 0) {\n              eachView.inElseMode = true;\n              eachView._domrange.addMember(\n                Blaze._materializeView(\n                  Blaze.View('each_else',eachView.elseFunc),\n                  eachView), 0);\n            }\n          } else {\n            eachView.initialSubviews.splice(index, 1);\n          }\n        });\n      },\n      changedAt: function (id, newItem, oldItem, index) {\n        Tracker.nonreactive(function () {\n          if (eachView.expandedValueDep) {\n            eachView.expandedValueDep.changed();\n          } else {\n            var itemView;\n            if (eachView._domrange) {\n              itemView = eachView._domrange.getMember(index).view;\n            } else {\n              itemView = eachView.initialSubviews[index];\n            }\n            if (eachView.variableName) {\n              itemView._scopeBindings[eachView.variableName].set(newItem);\n            } else {\n              itemView.dataVar.set(newItem);\n            }\n          }\n        });\n      },\n      movedTo: function (id, item, fromIndex, toIndex) {\n        Tracker.nonreactive(function () {\n          if (eachView.expandedValueDep) {\n            eachView.expandedValueDep.changed();\n          } else if (eachView._domrange) {\n            eachView._domrange.moveMember(fromIndex, toIndex);\n            updateIndices(\n              Math.min(fromIndex, toIndex), Math.max(fromIndex, toIndex));\n          } else {\n            var subviews = eachView.initialSubviews;\n            var itemView = subviews[fromIndex];\n            subviews.splice(fromIndex, 1);\n            subviews.splice(toIndex, 0, itemView);\n          }\n        });\n      }\n    });\n\n    if (eachView.elseFunc && eachView.numItems === 0) {\n      eachView.inElseMode = true;\n      eachView.initialSubviews[0] =\n        Blaze.View('each_else', eachView.elseFunc);\n    }\n  });\n\n  eachView.onViewDestroyed(function () {\n    if (eachView.stopHandle)\n      eachView.stopHandle.stop();\n  });\n\n  return eachView;\n};\n\nBlaze._TemplateWith = function (arg, contentFunc) {\n  var w;\n\n  var argFunc = arg;\n  if (typeof arg !== 'function') {\n    argFunc = function () {\n      return arg;\n    };\n  }\n\n  // This is a little messy.  When we compile `{{> Template.contentBlock}}`, we\n  // wrap it in Blaze._InOuterTemplateScope in order to skip the intermediate\n  // parent Views in the current template.  However, when there's an argument\n  // (`{{> Template.contentBlock arg}}`), the argument needs to be evaluated\n  // in the original scope.  There's no good order to nest\n  // Blaze._InOuterTemplateScope and Spacebars.TemplateWith to achieve this,\n  // so we wrap argFunc to run it in the \"original parentView\" of the\n  // Blaze._InOuterTemplateScope.\n  //\n  // To make this better, reconsider _InOuterTemplateScope as a primitive.\n  // Longer term, evaluate expressions in the proper lexical scope.\n  var wrappedArgFunc = function () {\n    var viewToEvaluateArg = null;\n    if (w.parentView && w.parentView.name === 'InOuterTemplateScope') {\n      viewToEvaluateArg = w.parentView.originalParentView;\n    }\n    if (viewToEvaluateArg) {\n      return Blaze._withCurrentView(viewToEvaluateArg, argFunc);\n    } else {\n      return argFunc();\n    }\n  };\n\n  var wrappedContentFunc = function () {\n    var content = contentFunc.call(this);\n\n    // Since we are generating the Blaze._TemplateWith view for the\n    // user, set the flag on the child view.  If `content` is a template,\n    // construct the View so that we can set the flag.\n    if (content instanceof Blaze.Template) {\n      content = content.constructView();\n    }\n    if (content instanceof Blaze.View) {\n      content._hasGeneratedParent = true;\n    }\n\n    return content;\n  };\n\n  w = Blaze.With(wrappedArgFunc, wrappedContentFunc);\n  w.__isTemplateWith = true;\n  return w;\n};\n\nBlaze._InOuterTemplateScope = function (templateView, contentFunc) {\n  var view = Blaze.View('InOuterTemplateScope', contentFunc);\n  var parentView = templateView.parentView;\n\n  // Hack so that if you call `{{> foo bar}}` and it expands into\n  // `{{#with bar}}{{> foo}}{{/with}}`, and then `foo` is a template\n  // that inserts `{{> Template.contentBlock}}`, the data context for\n  // `Template.contentBlock` is not `bar` but the one enclosing that.\n  if (parentView.__isTemplateWith)\n    parentView = parentView.parentView;\n\n  view.onViewCreated(function () {\n    this.originalParentView = this.parentView;\n    this.parentView = parentView;\n    this.__childDoesntStartNewLexicalScope = true;\n  });\n  return view;\n};\n\n// XXX COMPAT WITH 0.9.0\nBlaze.InOuterTemplateScope = Blaze._InOuterTemplateScope;\n"]},"sourceType":"module","hash":"cca5655b975754641baadc641576d9e469887106"}
