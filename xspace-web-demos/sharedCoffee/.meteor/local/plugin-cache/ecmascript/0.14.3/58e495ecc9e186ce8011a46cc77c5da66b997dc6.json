{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/jaylin/Documents/xspace/xspace-web-demos/sharedCoffee/packages/reactive-dict/reactive-dict.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser.legacy"},"sourceFileName":"packages/reactive-dict/reactive-dict.js","filename":"/Users/jaylin/Documents/xspace/xspace-web-demos/sharedCoffee/packages/reactive-dict/reactive-dict.js","passPerPreset":false,"envName":"development","cwd":"/Users/jaylin/Documents/xspace/xspace-web-demos/sharedCoffee","root":"/Users/jaylin/Documents/xspace/xspace-web-demos/sharedCoffee","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":true,"enforceStrictMode":false,"dynamicImport":true}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.9.2","helpers":true,"useESModules":false,"corejs":false}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$3","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$4","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":{},"_verified":{},"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-arrow-functions","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoped-functions","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoping","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-classes","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-computed-properties","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-destructuring","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-object-super","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-shorthand-properties","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-spread","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-sticky-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-typeof-symbol","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"TSModuleBlock":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectPattern":{"enter":[null]}},"options":{}},{"key":"transform-unicode-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-property-literals","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"ObjectMethod":{"enter":[null],"exit":[null]},"ClassMethod":{"enter":[null],"exit":[null]},"ClassPrivateMethod":{"enter":[null],"exit":[null]},"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]}},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/jaylin/Documents/xspace/xspace-web-demos/sharedCoffee/packages/reactive-dict/reactive-dict.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/reactive-dict/reactive-dict.js"}},"code":"var _typeof;\n\nmodule.link(\"@babel/runtime/helpers/typeof\", {\n  default: function (v) {\n    _typeof = v;\n  }\n}, 0);\nmodule.export({\n  ReactiveDict: function () {\n    return ReactiveDict;\n  }\n});\nvar hasOwn = Object.prototype.hasOwnProperty; // XXX come up with a serialization method which canonicalizes object key\n// order, which would allow us to use objects as values for equals.\n\nfunction stringify(value) {\n  if (value === undefined) {\n    return 'undefined';\n  }\n\n  return EJSON.stringify(value);\n}\n\nfunction parse(serialized) {\n  if (serialized === undefined || serialized === 'undefined') {\n    return undefined;\n  }\n\n  return EJSON.parse(serialized);\n}\n\nfunction changed(v) {\n  v && v.changed();\n} // XXX COMPAT WITH 0.9.1 : accept migrationData instead of dictName\n\n/**\n * @class\n * @instanceName ReactiveDict\n * @summary Constructor for a ReactiveDict, which represents a reactive dictionary of key/value pairs.\n * @locus Client\n * @param {String} [name] Optional.  When a name is passed, preserves contents across Hot Code Pushes\n * @param {Object} [initialValue] Optional.  The default values for the dictionary\n */\n\n\nvar ReactiveDict = /*#__PURE__*/function () {\n  function ReactiveDict(dictName, dictData) {\n    // this.keys: key -> value\n    this.keys = {};\n\n    if (dictName) {\n      // name given; migration will be performed\n      if (typeof dictName === 'string') {\n        // the normal case, argument is a string name.\n        // Only run migration logic on client, it will cause\n        // duplicate name errors on server during reloads.\n        // _registerDictForMigrate will throw an error on duplicate name.\n        Meteor.isClient && ReactiveDict._registerDictForMigrate(dictName, this);\n\n        var migratedData = Meteor.isClient && ReactiveDict._loadMigratedDict(dictName);\n\n        if (migratedData) {\n          // Don't stringify migrated data\n          this.keys = migratedData;\n        } else {\n          // Use _setObject to make sure values are stringified\n          this._setObject(dictData || {});\n        }\n\n        this.name = dictName;\n      } else if (_typeof(dictName) === 'object') {\n        // back-compat case: dictName is actually migrationData\n        // Use _setObject to make sure values are stringified\n        this._setObject(dictName);\n      } else {\n        throw new Error(\"Invalid ReactiveDict argument: \" + dictName);\n      }\n    } else if (_typeof(dictData) === 'object') {\n      this._setObject(dictData);\n    }\n\n    this.allDeps = new Tracker.Dependency();\n    this.keyDeps = {}; // key -> Dependency\n\n    this.keyValueDeps = {}; // key -> Dependency\n  } // set() began as a key/value method, but we are now overloading it\n  // to take an object of key/value pairs, similar to backbone\n  // http://backbonejs.org/#Model-set\n\n  /**\n   * @summary Set a value for a key in the ReactiveDict. Notify any listeners\n   * that the value has changed (eg: redraw templates, and rerun any\n   * [`Tracker.autorun`](#tracker_autorun) computations, that called\n   * [`ReactiveDict.get`](#ReactiveDict_get) on this `key`.)\n   * @locus Client\n   * @param {String} key The key to set, eg, `selectedItem`\n   * @param {EJSONable | undefined} value The new value for `key`\n   */\n\n\n  var _proto = ReactiveDict.prototype;\n\n  _proto.set = function () {\n    function set(keyOrObject, value) {\n      if (_typeof(keyOrObject) === 'object' && value === undefined) {\n        // Called as `dict.set({...})`\n        this._setObject(keyOrObject);\n\n        return;\n      } // the input isn't an object, so it must be a key\n      // and we resume with the rest of the function\n\n\n      var key = keyOrObject;\n      value = stringify(value);\n      var keyExisted = hasOwn.call(this.keys, key);\n      var oldSerializedValue = keyExisted ? this.keys[key] : 'undefined';\n      var isNewValue = value !== oldSerializedValue;\n      this.keys[key] = value;\n\n      if (isNewValue || !keyExisted) {\n        // Using the changed utility function here because this.allDeps might not exist yet,\n        // when setting initial data from constructor\n        changed(this.allDeps);\n      } // Don't trigger changes when setting initial data from constructor,\n      // this.KeyDeps is undefined in this case\n\n\n      if (isNewValue && this.keyDeps) {\n        changed(this.keyDeps[key]);\n\n        if (this.keyValueDeps[key]) {\n          changed(this.keyValueDeps[key][oldSerializedValue]);\n          changed(this.keyValueDeps[key][value]);\n        }\n      }\n    }\n\n    return set;\n  }()\n  /**\n   * @summary Set a value for a key if it hasn't been set before.\n   * Otherwise works exactly the same as [`ReactiveDict.set`](#ReactiveDict-set).\n   * @locus Client\n   * @param {String} key The key to set, eg, `selectedItem`\n   * @param {EJSONable | undefined} value The new value for `key`\n   */\n  ;\n\n  _proto.setDefault = function () {\n    function setDefault(keyOrObject, value) {\n      if (_typeof(keyOrObject) === 'object' && value === undefined) {\n        // Called as `dict.setDefault({...})`\n        this._setDefaultObject(keyOrObject);\n\n        return;\n      } // the input isn't an object, so it must be a key\n      // and we resume with the rest of the function\n\n\n      var key = keyOrObject;\n\n      if (!hasOwn.call(this.keys, key)) {\n        this.set(key, value);\n      }\n    }\n\n    return setDefault;\n  }()\n  /**\n   * @summary Get the value assiciated with a key. If inside a [reactive\n   * computation](#reactivity), invalidate the computation the next time the\n   * value associated with this key is changed by\n   * [`ReactiveDict.set`](#ReactiveDict-set).\n   * This returns a clone of the value, so if it's an object or an array,\n   * mutating the returned value has no effect on the value stored in the\n   * ReactiveDict.\n   * @locus Client\n   * @param {String} key The key of the element to return\n   */\n  ;\n\n  _proto.get = function () {\n    function get(key) {\n      this._ensureKey(key);\n\n      this.keyDeps[key].depend();\n      return parse(this.keys[key]);\n    }\n\n    return get;\n  }()\n  /**\n   * @summary Test if the stored entry for a key is equal to a value. If inside a\n   * [reactive computation](#reactivity), invalidate the computation the next\n   * time the variable changes to or from the value.\n   * @locus Client\n   * @param {String} key The name of the session variable to test\n   * @param {String | Number | Boolean | null | undefined} value The value to\n   * test against\n   */\n  ;\n\n  _proto.equals = function () {\n    function equals(key, value) {\n      var _this = this;\n\n      // Mongo.ObjectID is in the 'mongo' package\n      var ObjectID = null;\n\n      if (Package.mongo) {\n        ObjectID = Package.mongo.Mongo.ObjectID;\n      } // We don't allow objects (or arrays that might include objects) for\n      // .equals, because JSON.stringify doesn't canonicalize object key\n      // order. (We can make equals have the right return value by parsing the\n      // current value and using EJSON.equals, but we won't have a canonical\n      // element of keyValueDeps[key] to store the dependency.) You can still use\n      // \"EJSON.equals(reactiveDict.get(key), value)\".\n      //\n      // XXX we could allow arrays as long as we recursively check that there\n      // are no objects\n\n\n      if (typeof value !== 'string' && typeof value !== 'number' && typeof value !== 'boolean' && typeof value !== 'undefined' && !(value instanceof Date) && !(ObjectID && value instanceof ObjectID) && value !== null) {\n        throw new Error(\"ReactiveDict.equals: value must be scalar\");\n      }\n\n      var serializedValue = stringify(value);\n\n      if (Tracker.active) {\n        this._ensureKey(key);\n\n        if (!hasOwn.call(this.keyValueDeps[key], serializedValue)) {\n          this.keyValueDeps[key][serializedValue] = new Tracker.Dependency();\n        }\n\n        var isNew = this.keyValueDeps[key][serializedValue].depend();\n\n        if (isNew) {\n          Tracker.onInvalidate(function () {\n            // clean up [key][serializedValue] if it's now empty, so we don't\n            // use O(n) memory for n = values seen ever\n            if (!_this.keyValueDeps[key][serializedValue].hasDependents()) {\n              delete _this.keyValueDeps[key][serializedValue];\n            }\n          });\n        }\n      }\n\n      var oldValue = undefined;\n\n      if (hasOwn.call(this.keys, key)) {\n        oldValue = parse(this.keys[key]);\n      }\n\n      return EJSON.equals(oldValue, value);\n    }\n\n    return equals;\n  }()\n  /**\n   * @summary Get all key-value pairs as a plain object. If inside a [reactive\n   * computation](#reactivity), invalidate the computation the next time the\n   * value associated with any key is changed by\n   * [`ReactiveDict.set`](#ReactiveDict-set).\n   * This returns a clone of each value, so if it's an object or an array,\n   * mutating the returned value has no effect on the value stored in the\n   * ReactiveDict.\n   * @locus Client\n   */\n  ;\n\n  _proto.all = function () {\n    function all() {\n      var _this2 = this;\n\n      this.allDeps.depend();\n      var ret = {};\n      Object.keys(this.keys).forEach(function (key) {\n        ret[key] = parse(_this2.keys[key]);\n      });\n      return ret;\n    }\n\n    return all;\n  }()\n  /**\n   * @summary remove all key-value pairs from the ReactiveDict. Notify any\n   * listeners that the value has changed (eg: redraw templates, and rerun any\n   * [`Tracker.autorun`](#tracker_autorun) computations, that called\n   * [`ReactiveDict.get`](#ReactiveDict_get) on this `key`.)\n   * @locus Client\n   */\n  ;\n\n  _proto.clear = function () {\n    function clear() {\n      var _this3 = this;\n\n      var oldKeys = this.keys;\n      this.keys = {};\n      this.allDeps.changed();\n      Object.keys(oldKeys).forEach(function (key) {\n        changed(_this3.keyDeps[key]);\n\n        if (_this3.keyValueDeps[key]) {\n          changed(_this3.keyValueDeps[key][oldKeys[key]]);\n          changed(_this3.keyValueDeps[key]['undefined']);\n        }\n      });\n    }\n\n    return clear;\n  }()\n  /**\n   * @summary remove a key-value pair from the ReactiveDict. Notify any listeners\n   * that the value has changed (eg: redraw templates, and rerun any\n   * [`Tracker.autorun`](#tracker_autorun) computations, that called\n   * [`ReactiveDict.get`](#ReactiveDict_get) on this `key`.)\n   * @locus Client\n   * @param {String} key The key to delete, eg, `selectedItem`\n   */\n  ;\n\n  _proto.delete = function () {\n    function _delete(key) {\n      var didRemove = false;\n\n      if (hasOwn.call(this.keys, key)) {\n        var oldValue = this.keys[key];\n        delete this.keys[key];\n        changed(this.keyDeps[key]);\n\n        if (this.keyValueDeps[key]) {\n          changed(this.keyValueDeps[key][oldValue]);\n          changed(this.keyValueDeps[key]['undefined']);\n        }\n\n        this.allDeps.changed();\n        didRemove = true;\n      }\n\n      return didRemove;\n    }\n\n    return _delete;\n  }()\n  /**\n   * @summary Clear all values from the reactiveDict and prevent it from being\n   * migrated on a Hot Code Pushes. Notify any listeners\n   * that the value has changed (eg: redraw templates, and rerun any\n   * [`Tracker.autorun`](#tracker_autorun) computations, that called\n   * [`ReactiveDict.get`](#ReactiveDict_get) on this `key`.)\n   * @locus Client\n   */\n  ;\n\n  _proto.destroy = function () {\n    function destroy() {\n      this.clear();\n\n      if (this.name && hasOwn.call(ReactiveDict._dictsToMigrate, this.name)) {\n        delete ReactiveDict._dictsToMigrate[this.name];\n      }\n    }\n\n    return destroy;\n  }();\n\n  _proto._setObject = function () {\n    function _setObject(object) {\n      var _this4 = this;\n\n      Object.keys(object).forEach(function (key) {\n        _this4.set(key, object[key]);\n      });\n    }\n\n    return _setObject;\n  }();\n\n  _proto._setDefaultObject = function () {\n    function _setDefaultObject(object) {\n      var _this5 = this;\n\n      Object.keys(object).forEach(function (key) {\n        _this5.setDefault(key, object[key]);\n      });\n    }\n\n    return _setDefaultObject;\n  }();\n\n  _proto._ensureKey = function () {\n    function _ensureKey(key) {\n      if (!(key in this.keyDeps)) {\n        this.keyDeps[key] = new Tracker.Dependency();\n        this.keyValueDeps[key] = {};\n      }\n    }\n\n    return _ensureKey;\n  }() // Get a JSON value that can be passed to the constructor to\n  // create a new ReactiveDict with the same contents as this one\n  ;\n\n  _proto._getMigrationData = function () {\n    function _getMigrationData() {\n      // XXX sanitize and make sure it's JSONible?\n      return this.keys;\n    }\n\n    return _getMigrationData;\n  }();\n\n  return ReactiveDict;\n}();","map":{"version":3,"sources":["packages/reactive-dict/reactive-dict.js"],"names":["_typeof","module","link","default","v","export","ReactiveDict","hasOwn","Object","prototype","hasOwnProperty","stringify","value","undefined","EJSON","parse","serialized","changed","dictName","dictData","keys","Meteor","isClient","_registerDictForMigrate","migratedData","_loadMigratedDict","_setObject","name","Error","allDeps","Tracker","Dependency","keyDeps","keyValueDeps","set","keyOrObject","key","keyExisted","call","oldSerializedValue","isNewValue","setDefault","_setDefaultObject","get","_ensureKey","depend","equals","ObjectID","Package","mongo","Mongo","Date","serializedValue","active","isNew","onInvalidate","hasDependents","oldValue","all","ret","forEach","clear","oldKeys","delete","didRemove","destroy","_dictsToMigrate","object","_getMigrationData"],"mappings":"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","sourcesContent":["const hasOwn = Object.prototype.hasOwnProperty;\n\n// XXX come up with a serialization method which canonicalizes object key\n// order, which would allow us to use objects as values for equals.\nfunction stringify(value) {\n  if (value === undefined) {\n    return 'undefined';\n  }\n  return EJSON.stringify(value);\n}\n\nfunction parse(serialized) {\n  if (serialized === undefined || serialized === 'undefined') {\n    return undefined;\n  }\n  return EJSON.parse(serialized);\n}\n\nfunction changed(v) {\n  v && v.changed();\n}\n\n// XXX COMPAT WITH 0.9.1 : accept migrationData instead of dictName\n/**\n * @class\n * @instanceName ReactiveDict\n * @summary Constructor for a ReactiveDict, which represents a reactive dictionary of key/value pairs.\n * @locus Client\n * @param {String} [name] Optional.  When a name is passed, preserves contents across Hot Code Pushes\n * @param {Object} [initialValue] Optional.  The default values for the dictionary\n */\nexport class ReactiveDict {\n  constructor(dictName, dictData) {\n    // this.keys: key -> value\n    this.keys = {};\n\n    if (dictName) {\n      // name given; migration will be performed\n      if (typeof dictName === 'string') {\n        // the normal case, argument is a string name.\n\n        // Only run migration logic on client, it will cause\n        // duplicate name errors on server during reloads.\n        // _registerDictForMigrate will throw an error on duplicate name.\n        Meteor.isClient && ReactiveDict._registerDictForMigrate(dictName, this);\n        const migratedData = Meteor.isClient && ReactiveDict._loadMigratedDict(dictName);\n\n        if (migratedData) {\n          // Don't stringify migrated data\n          this.keys = migratedData;\n        } else {\n          // Use _setObject to make sure values are stringified\n          this._setObject(dictData || {});\n        }\n        this.name = dictName;\n      } else if (typeof dictName === 'object') {\n        // back-compat case: dictName is actually migrationData\n        // Use _setObject to make sure values are stringified\n        this._setObject(dictName);\n      } else {\n        throw new Error(\"Invalid ReactiveDict argument: \" + dictName);\n      }\n    } else if (typeof dictData === 'object') {\n      this._setObject(dictData);\n    }\n\n    this.allDeps = new Tracker.Dependency;\n    this.keyDeps = {}; // key -> Dependency\n    this.keyValueDeps = {}; // key -> Dependency\n  }\n\n  // set() began as a key/value method, but we are now overloading it\n  // to take an object of key/value pairs, similar to backbone\n  // http://backbonejs.org/#Model-set\n  /**\n   * @summary Set a value for a key in the ReactiveDict. Notify any listeners\n   * that the value has changed (eg: redraw templates, and rerun any\n   * [`Tracker.autorun`](#tracker_autorun) computations, that called\n   * [`ReactiveDict.get`](#ReactiveDict_get) on this `key`.)\n   * @locus Client\n   * @param {String} key The key to set, eg, `selectedItem`\n   * @param {EJSONable | undefined} value The new value for `key`\n   */\n  set(keyOrObject, value) {\n    if ((typeof keyOrObject === 'object') && (value === undefined)) {\n      // Called as `dict.set({...})`\n      this._setObject(keyOrObject);\n      return;\n    }\n    // the input isn't an object, so it must be a key\n    // and we resume with the rest of the function\n    const key = keyOrObject;\n\n    value = stringify(value);\n\n    const keyExisted = hasOwn.call(this.keys, key);\n    const oldSerializedValue = keyExisted ? this.keys[key] : 'undefined';\n    const isNewValue = (value !== oldSerializedValue);\n\n    this.keys[key] = value;\n\n    if (isNewValue || !keyExisted) {\n      // Using the changed utility function here because this.allDeps might not exist yet,\n      // when setting initial data from constructor\n      changed(this.allDeps);\n    }\n\n    // Don't trigger changes when setting initial data from constructor,\n    // this.KeyDeps is undefined in this case\n    if (isNewValue && this.keyDeps) {\n      changed(this.keyDeps[key]);\n      if (this.keyValueDeps[key]) {\n        changed(this.keyValueDeps[key][oldSerializedValue]);\n        changed(this.keyValueDeps[key][value]);\n      }\n    }\n  }\n\n  /**\n   * @summary Set a value for a key if it hasn't been set before.\n   * Otherwise works exactly the same as [`ReactiveDict.set`](#ReactiveDict-set).\n   * @locus Client\n   * @param {String} key The key to set, eg, `selectedItem`\n   * @param {EJSONable | undefined} value The new value for `key`\n   */\n  setDefault(keyOrObject, value) {\n    if ((typeof keyOrObject === 'object') && (value === undefined)) {\n      // Called as `dict.setDefault({...})`\n      this._setDefaultObject(keyOrObject);\n      return;\n    }\n    // the input isn't an object, so it must be a key\n    // and we resume with the rest of the function\n    const key = keyOrObject;\n\n    if (! hasOwn.call(this.keys, key)) {\n      this.set(key, value);\n    }\n  }\n\n  /**\n   * @summary Get the value assiciated with a key. If inside a [reactive\n   * computation](#reactivity), invalidate the computation the next time the\n   * value associated with this key is changed by\n   * [`ReactiveDict.set`](#ReactiveDict-set).\n   * This returns a clone of the value, so if it's an object or an array,\n   * mutating the returned value has no effect on the value stored in the\n   * ReactiveDict.\n   * @locus Client\n   * @param {String} key The key of the element to return\n   */\n  get(key) {\n    this._ensureKey(key);\n    this.keyDeps[key].depend();\n    return parse(this.keys[key]);\n  }\n\n  /**\n   * @summary Test if the stored entry for a key is equal to a value. If inside a\n   * [reactive computation](#reactivity), invalidate the computation the next\n   * time the variable changes to or from the value.\n   * @locus Client\n   * @param {String} key The name of the session variable to test\n   * @param {String | Number | Boolean | null | undefined} value The value to\n   * test against\n   */\n  equals(key, value) {\n    // Mongo.ObjectID is in the 'mongo' package\n    let ObjectID = null;\n    if (Package.mongo) {\n      ObjectID = Package.mongo.Mongo.ObjectID;\n    }\n    // We don't allow objects (or arrays that might include objects) for\n    // .equals, because JSON.stringify doesn't canonicalize object key\n    // order. (We can make equals have the right return value by parsing the\n    // current value and using EJSON.equals, but we won't have a canonical\n    // element of keyValueDeps[key] to store the dependency.) You can still use\n    // \"EJSON.equals(reactiveDict.get(key), value)\".\n    //\n    // XXX we could allow arrays as long as we recursively check that there\n    // are no objects\n    if (typeof value !== 'string' &&\n        typeof value !== 'number' &&\n        typeof value !== 'boolean' &&\n        typeof value !== 'undefined' &&\n        !(value instanceof Date) &&\n        !(ObjectID && value instanceof ObjectID) &&\n        value !== null) {\n      throw new Error(\"ReactiveDict.equals: value must be scalar\");\n    }\n    const serializedValue = stringify(value);\n\n    if (Tracker.active) {\n      this._ensureKey(key);\n\n      if (! hasOwn.call(this.keyValueDeps[key], serializedValue)) {\n        this.keyValueDeps[key][serializedValue] = new Tracker.Dependency;\n      }\n\n      var isNew = this.keyValueDeps[key][serializedValue].depend();\n      if (isNew) {\n        Tracker.onInvalidate(() => {\n          // clean up [key][serializedValue] if it's now empty, so we don't\n          // use O(n) memory for n = values seen ever\n          if (! this.keyValueDeps[key][serializedValue].hasDependents()) {\n            delete this.keyValueDeps[key][serializedValue];\n          }\n        });\n      }\n    }\n\n    let oldValue = undefined;\n    if (hasOwn.call(this.keys, key)) {\n      oldValue = parse(this.keys[key]);\n    }\n    return EJSON.equals(oldValue, value);\n  }\n\n  /**\n   * @summary Get all key-value pairs as a plain object. If inside a [reactive\n   * computation](#reactivity), invalidate the computation the next time the\n   * value associated with any key is changed by\n   * [`ReactiveDict.set`](#ReactiveDict-set).\n   * This returns a clone of each value, so if it's an object or an array,\n   * mutating the returned value has no effect on the value stored in the\n   * ReactiveDict.\n   * @locus Client\n   */\n  all() {\n    this.allDeps.depend();\n    let ret = {};\n    Object.keys(this.keys).forEach(key => {\n      ret[key] = parse(this.keys[key]);\n    });\n    return ret;\n  }\n\n  /**\n   * @summary remove all key-value pairs from the ReactiveDict. Notify any\n   * listeners that the value has changed (eg: redraw templates, and rerun any\n   * [`Tracker.autorun`](#tracker_autorun) computations, that called\n   * [`ReactiveDict.get`](#ReactiveDict_get) on this `key`.)\n   * @locus Client\n   */\n  clear() {\n    const oldKeys = this.keys;\n    this.keys = {};\n\n    this.allDeps.changed();\n\n    Object.keys(oldKeys).forEach(key => {\n      changed(this.keyDeps[key]);\n      if (this.keyValueDeps[key]) {\n        changed(this.keyValueDeps[key][oldKeys[key]]);\n        changed(this.keyValueDeps[key]['undefined']);\n      }\n    });\n  }\n\n  /**\n   * @summary remove a key-value pair from the ReactiveDict. Notify any listeners\n   * that the value has changed (eg: redraw templates, and rerun any\n   * [`Tracker.autorun`](#tracker_autorun) computations, that called\n   * [`ReactiveDict.get`](#ReactiveDict_get) on this `key`.)\n   * @locus Client\n   * @param {String} key The key to delete, eg, `selectedItem`\n   */\n  delete(key) {\n    let didRemove = false;\n\n    if (hasOwn.call(this.keys, key)) {\n      const oldValue = this.keys[key];\n      delete this.keys[key];\n      changed(this.keyDeps[key]);\n      if (this.keyValueDeps[key]) {\n        changed(this.keyValueDeps[key][oldValue]);\n        changed(this.keyValueDeps[key]['undefined']);\n      }\n      this.allDeps.changed();\n      didRemove = true;\n    }\n    return didRemove;\n  }\n\n  /**\n   * @summary Clear all values from the reactiveDict and prevent it from being\n   * migrated on a Hot Code Pushes. Notify any listeners\n   * that the value has changed (eg: redraw templates, and rerun any\n   * [`Tracker.autorun`](#tracker_autorun) computations, that called\n   * [`ReactiveDict.get`](#ReactiveDict_get) on this `key`.)\n   * @locus Client\n   */\n  destroy() {\n    this.clear();\n    if (this.name && hasOwn.call(ReactiveDict._dictsToMigrate, this.name)) {\n      delete ReactiveDict._dictsToMigrate[this.name];\n    }\n  }\n\n  _setObject(object) {\n    Object.keys(object).forEach(key => {\n      this.set(key, object[key]);\n    });\n  }\n\n  _setDefaultObject(object) {\n    Object.keys(object).forEach(key => {\n      this.setDefault(key, object[key]);\n    });\n  }\n\n  _ensureKey(key) {\n    if (!(key in this.keyDeps)) {\n      this.keyDeps[key] = new Tracker.Dependency;\n      this.keyValueDeps[key] = {};\n    }\n  }\n\n  // Get a JSON value that can be passed to the constructor to\n  // create a new ReactiveDict with the same contents as this one\n  _getMigrationData() {\n    // XXX sanitize and make sure it's JSONible?\n    return this.keys;\n  }\n}\n"]},"sourceType":"module","hash":"58e495ecc9e186ce8011a46cc77c5da66b997dc6"}
