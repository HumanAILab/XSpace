{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/jaylin/Documents/xspace/xspace-web-demos/sharedCoffee/packages/blaze/view.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"packages/blaze/view.js","filename":"/Users/jaylin/Documents/xspace/xspace-web-demos/sharedCoffee/packages/blaze/view.js","passPerPreset":false,"envName":"development","cwd":"/Users/jaylin/Documents/xspace/xspace-web-demos/sharedCoffee","root":"/Users/jaylin/Documents/xspace/xspace-web-demos/sharedCoffee","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.9.2","helpers":true,"useESModules":false,"corejs":false}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":{},"_verified":{},"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/jaylin/Documents/xspace/xspace-web-demos/sharedCoffee/packages/blaze/view.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/blaze/view.js"}},"code":"/// [new] Blaze.View([name], renderMethod)\n///\n/// Blaze.View is the building block of reactive DOM.  Views have\n/// the following features:\n///\n/// * lifecycle callbacks - Views are created, rendered, and destroyed,\n///   and callbacks can be registered to fire when these things happen.\n///\n/// * parent pointer - A View points to its parentView, which is the\n///   View that caused it to be rendered.  These pointers form a\n///   hierarchy or tree of Views.\n///\n/// * render() method - A View's render() method specifies the DOM\n///   (or HTML) content of the View.  If the method establishes\n///   reactive dependencies, it may be re-run.\n///\n/// * a DOMRange - If a View is rendered to DOM, its position and\n///   extent in the DOM are tracked using a DOMRange object.\n///\n/// When a View is constructed by calling Blaze.View, the View is\n/// not yet considered \"created.\"  It doesn't have a parentView yet,\n/// and no logic has been run to initialize the View.  All real\n/// work is deferred until at least creation time, when the onViewCreated\n/// callbacks are fired, which happens when the View is \"used\" in\n/// some way that requires it to be rendered.\n///\n/// ...more lifecycle stuff\n///\n/// `name` is an optional string tag identifying the View.  The only\n/// time it's used is when looking in the View tree for a View of a\n/// particular name; for example, data contexts are stored on Views\n/// of name \"with\".  Names are also useful when debugging, so in\n/// general it's good for functions that create Views to set the name.\n/// Views associated with templates have names of the form \"Template.foo\".\n\n/**\n * @class\n * @summary Constructor for a View, which represents a reactive region of DOM.\n * @locus Client\n * @param {String} [name] Optional.  A name for this type of View.  See [`view.name`](#view_name).\n * @param {Function} renderFunction A function that returns [*renderable content*](#Renderable-Content).  In this function, `this` is bound to the View.\n */\nBlaze.View = function (name, render) {\n  if (!(this instanceof Blaze.View)) // called without `new`\n    return new Blaze.View(name, render);\n\n  if (typeof name === 'function') {\n    // omitted \"name\" argument\n    render = name;\n    name = '';\n  }\n\n  this.name = name;\n  this._render = render;\n  this._callbacks = {\n    created: null,\n    rendered: null,\n    destroyed: null\n  }; // Setting all properties here is good for readability,\n  // and also may help Chrome optimize the code by keeping\n  // the View object from changing shape too much.\n\n  this.isCreated = false;\n  this._isCreatedForExpansion = false;\n  this.isRendered = false;\n  this._isAttached = false;\n  this.isDestroyed = false;\n  this._isInRender = false;\n  this.parentView = null;\n  this._domrange = null; // This flag is normally set to false except for the cases when view's parent\n  // was generated as part of expanding some syntactic sugar expressions or\n  // methods.\n  // Ex.: Blaze.renderWithData is an equivalent to creating a view with regular\n  // Blaze.render and wrapping it into {{#with data}}{{/with}} view. Since the\n  // users don't know anything about these generated parent views, Blaze needs\n  // this information to be available on views to make smarter decisions. For\n  // example: removing the generated parent view with the view on Blaze.remove.\n\n  this._hasGeneratedParent = false; // Bindings accessible to children views (via view.lookup('name')) within the\n  // closest template view.\n\n  this._scopeBindings = {};\n  this.renderCount = 0;\n};\n\nBlaze.View.prototype._render = function () {\n  return null;\n};\n\nBlaze.View.prototype.onViewCreated = function (cb) {\n  this._callbacks.created = this._callbacks.created || [];\n\n  this._callbacks.created.push(cb);\n};\n\nBlaze.View.prototype._onViewRendered = function (cb) {\n  this._callbacks.rendered = this._callbacks.rendered || [];\n\n  this._callbacks.rendered.push(cb);\n};\n\nBlaze.View.prototype.onViewReady = function (cb) {\n  var self = this;\n\n  var fire = function () {\n    Tracker.afterFlush(function () {\n      if (!self.isDestroyed) {\n        Blaze._withCurrentView(self, function () {\n          cb.call(self);\n        });\n      }\n    });\n  };\n\n  self._onViewRendered(function onViewRendered() {\n    if (self.isDestroyed) return;\n    if (!self._domrange.attached) self._domrange.onAttached(fire);else fire();\n  });\n};\n\nBlaze.View.prototype.onViewDestroyed = function (cb) {\n  this._callbacks.destroyed = this._callbacks.destroyed || [];\n\n  this._callbacks.destroyed.push(cb);\n};\n\nBlaze.View.prototype.removeViewDestroyedListener = function (cb) {\n  var destroyed = this._callbacks.destroyed;\n  if (!destroyed) return;\n\n  var index = _.lastIndexOf(destroyed, cb);\n\n  if (index !== -1) {\n    // XXX You'd think the right thing to do would be splice, but _fireCallbacks\n    // gets sad if you remove callbacks while iterating over the list.  Should\n    // change this to use callback-hook or EventEmitter or something else that\n    // properly supports removal.\n    destroyed[index] = null;\n  }\n}; /// View#autorun(func)\n///\n/// Sets up a Tracker autorun that is \"scoped\" to this View in two\n/// important ways: 1) Blaze.currentView is automatically set\n/// on every re-run, and 2) the autorun is stopped when the\n/// View is destroyed.  As with Tracker.autorun, the first run of\n/// the function is immediate, and a Computation object that can\n/// be used to stop the autorun is returned.\n///\n/// View#autorun is meant to be called from View callbacks like\n/// onViewCreated, or from outside the rendering process.  It may not\n/// be called before the onViewCreated callbacks are fired (too early),\n/// or from a render() method (too confusing).\n///\n/// Typically, autoruns that update the state\n/// of the View (as in Blaze.With) should be started from an onViewCreated\n/// callback.  Autoruns that update the DOM should be started\n/// from either onViewCreated (guarded against the absence of\n/// view._domrange), or onViewReady.\n\n\nBlaze.View.prototype.autorun = function (f, _inViewScope, displayName) {\n  var self = this; // The restrictions on when View#autorun can be called are in order\n  // to avoid bad patterns, like creating a Blaze.View and immediately\n  // calling autorun on it.  A freshly created View is not ready to\n  // have logic run on it; it doesn't have a parentView, for example.\n  // It's when the View is materialized or expanded that the onViewCreated\n  // handlers are fired and the View starts up.\n  //\n  // Letting the render() method call `this.autorun()` is problematic\n  // because of re-render.  The best we can do is to stop the old\n  // autorun and start a new one for each render, but that's a pattern\n  // we try to avoid internally because it leads to helpers being\n  // called extra times, in the case where the autorun causes the\n  // view to re-render (and thus the autorun to be torn down and a\n  // new one established).\n  //\n  // We could lift these restrictions in various ways.  One interesting\n  // idea is to allow you to call `view.autorun` after instantiating\n  // `view`, and automatically wrap it in `view.onViewCreated`, deferring\n  // the autorun so that it starts at an appropriate time.  However,\n  // then we can't return the Computation object to the caller, because\n  // it doesn't exist yet.\n\n  if (!self.isCreated) {\n    throw new Error(\"View#autorun must be called from the created callback at the earliest\");\n  }\n\n  if (this._isInRender) {\n    throw new Error(\"Can't call View#autorun from inside render(); try calling it from the created or rendered callback\");\n  }\n\n  var templateInstanceFunc = Blaze.Template._currentTemplateInstanceFunc;\n\n  var func = function viewAutorun(c) {\n    return Blaze._withCurrentView(_inViewScope || self, function () {\n      return Blaze.Template._withTemplateInstanceFunc(templateInstanceFunc, function () {\n        return f.call(self, c);\n      });\n    });\n  }; // Give the autorun function a better name for debugging and profiling.\n  // The `displayName` property is not part of the spec but browsers like Chrome\n  // and Firefox prefer it in debuggers over the name function was declared by.\n\n\n  func.displayName = (self.name || 'anonymous') + ':' + (displayName || 'anonymous');\n  var comp = Tracker.autorun(func);\n\n  var stopComputation = function () {\n    comp.stop();\n  };\n\n  self.onViewDestroyed(stopComputation);\n  comp.onStop(function () {\n    self.removeViewDestroyedListener(stopComputation);\n  });\n  return comp;\n};\n\nBlaze.View.prototype._errorIfShouldntCallSubscribe = function () {\n  var self = this;\n\n  if (!self.isCreated) {\n    throw new Error(\"View#subscribe must be called from the created callback at the earliest\");\n  }\n\n  if (self._isInRender) {\n    throw new Error(\"Can't call View#subscribe from inside render(); try calling it from the created or rendered callback\");\n  }\n\n  if (self.isDestroyed) {\n    throw new Error(\"Can't call View#subscribe from inside the destroyed callback, try calling it inside created or rendered.\");\n  }\n};\n/**\n * Just like Blaze.View#autorun, but with Meteor.subscribe instead of\n * Tracker.autorun. Stop the subscription when the view is destroyed.\n * @return {SubscriptionHandle} A handle to the subscription so that you can\n * see if it is ready, or stop it manually\n */\n\n\nBlaze.View.prototype.subscribe = function (args, options) {\n  var self = this;\n  options = options || {};\n\n  self._errorIfShouldntCallSubscribe();\n\n  var subHandle;\n\n  if (options.connection) {\n    subHandle = options.connection.subscribe.apply(options.connection, args);\n  } else {\n    subHandle = Meteor.subscribe.apply(Meteor, args);\n  }\n\n  self.onViewDestroyed(function () {\n    subHandle.stop();\n  });\n  return subHandle;\n};\n\nBlaze.View.prototype.firstNode = function () {\n  if (!this._isAttached) throw new Error(\"View must be attached before accessing its DOM\");\n  return this._domrange.firstNode();\n};\n\nBlaze.View.prototype.lastNode = function () {\n  if (!this._isAttached) throw new Error(\"View must be attached before accessing its DOM\");\n  return this._domrange.lastNode();\n};\n\nBlaze._fireCallbacks = function (view, which) {\n  Blaze._withCurrentView(view, function () {\n    Tracker.nonreactive(function fireCallbacks() {\n      var cbs = view._callbacks[which];\n\n      for (var i = 0, N = cbs && cbs.length; i < N; i++) cbs[i] && cbs[i].call(view);\n    });\n  });\n};\n\nBlaze._createView = function (view, parentView, forExpansion) {\n  if (view.isCreated) throw new Error(\"Can't render the same View twice\");\n  view.parentView = parentView || null;\n  view.isCreated = true;\n  if (forExpansion) view._isCreatedForExpansion = true;\n\n  Blaze._fireCallbacks(view, 'created');\n};\n\nvar doFirstRender = function (view, initialContent) {\n  var domrange = new Blaze._DOMRange(initialContent);\n  view._domrange = domrange;\n  domrange.view = view;\n  view.isRendered = true;\n\n  Blaze._fireCallbacks(view, 'rendered');\n\n  var teardownHook = null;\n  domrange.onAttached(function attached(range, element) {\n    view._isAttached = true;\n    teardownHook = Blaze._DOMBackend.Teardown.onElementTeardown(element, function teardown() {\n      Blaze._destroyView(view, true\n      /* _skipNodes */\n      );\n    });\n  }); // tear down the teardown hook\n\n  view.onViewDestroyed(function () {\n    teardownHook && teardownHook.stop();\n    teardownHook = null;\n  });\n  return domrange;\n}; // Take an uncreated View `view` and create and render it to DOM,\n// setting up the autorun that updates the View.  Returns a new\n// DOMRange, which has been associated with the View.\n//\n// The private arguments `_workStack` and `_intoArray` are passed in\n// by Blaze._materializeDOM and are only present for recursive calls\n// (when there is some other _materializeView on the stack).  If\n// provided, then we avoid the mutual recursion of calling back into\n// Blaze._materializeDOM so that deep View hierarchies don't blow the\n// stack.  Instead, we push tasks onto workStack for the initial\n// rendering and subsequent setup of the View, and they are done after\n// we return.  When there is a _workStack, we do not return the new\n// DOMRange, but instead push it into _intoArray from a _workStack\n// task.\n\n\nBlaze._materializeView = function (view, parentView, _workStack, _intoArray) {\n  Blaze._createView(view, parentView);\n\n  var domrange;\n  var lastHtmljs; // We don't expect to be called in a Computation, but just in case,\n  // wrap in Tracker.nonreactive.\n\n  Tracker.nonreactive(function () {\n    view.autorun(function doRender(c) {\n      // `view.autorun` sets the current view.\n      view.renderCount++;\n      view._isInRender = true; // Any dependencies that should invalidate this Computation come\n      // from this line:\n\n      var htmljs = view._render();\n\n      view._isInRender = false;\n\n      if (!c.firstRun && !Blaze._isContentEqual(lastHtmljs, htmljs)) {\n        Tracker.nonreactive(function doMaterialize() {\n          // re-render\n          var rangesAndNodes = Blaze._materializeDOM(htmljs, [], view);\n\n          domrange.setMembers(rangesAndNodes);\n\n          Blaze._fireCallbacks(view, 'rendered');\n        });\n      }\n\n      lastHtmljs = htmljs; // Causes any nested views to stop immediately, not when we call\n      // `setMembers` the next time around the autorun.  Otherwise,\n      // helpers in the DOM tree to be replaced might be scheduled\n      // to re-run before we have a chance to stop them.\n\n      Tracker.onInvalidate(function () {\n        if (domrange) {\n          domrange.destroyMembers();\n        }\n      });\n    }, undefined, 'materialize'); // first render.  lastHtmljs is the first htmljs.\n\n    var initialContents;\n\n    if (!_workStack) {\n      initialContents = Blaze._materializeDOM(lastHtmljs, [], view);\n      domrange = doFirstRender(view, initialContents);\n      initialContents = null; // help GC because we close over this scope a lot\n    } else {\n      // We're being called from Blaze._materializeDOM, so to avoid\n      // recursion and save stack space, provide a description of the\n      // work to be done instead of doing it.  Tasks pushed onto\n      // _workStack will be done in LIFO order after we return.\n      // The work will still be done within a Tracker.nonreactive,\n      // because it will be done by some call to Blaze._materializeDOM\n      // (which is always called in a Tracker.nonreactive).\n      initialContents = []; // push this function first so that it happens last\n\n      _workStack.push(function () {\n        domrange = doFirstRender(view, initialContents);\n        initialContents = null; // help GC because of all the closures here\n\n        _intoArray.push(domrange);\n      }); // now push the task that calculates initialContents\n\n\n      _workStack.push(Blaze._bind(Blaze._materializeDOM, null, lastHtmljs, initialContents, view, _workStack));\n    }\n  });\n\n  if (!_workStack) {\n    return domrange;\n  } else {\n    return null;\n  }\n}; // Expands a View to HTMLjs, calling `render` recursively on all\n// Views and evaluating any dynamic attributes.  Calls the `created`\n// callback, but not the `materialized` or `rendered` callbacks.\n// Destroys the view immediately, unless called in a Tracker Computation,\n// in which case the view will be destroyed when the Computation is\n// invalidated.  If called in a Tracker Computation, the result is a\n// reactive string; that is, the Computation will be invalidated\n// if any changes are made to the view or subviews that might affect\n// the HTML.\n\n\nBlaze._expandView = function (view, parentView) {\n  Blaze._createView(view, parentView, true\n  /*forExpansion*/\n  );\n\n  view._isInRender = true;\n\n  var htmljs = Blaze._withCurrentView(view, function () {\n    return view._render();\n  });\n\n  view._isInRender = false;\n\n  var result = Blaze._expand(htmljs, view);\n\n  if (Tracker.active) {\n    Tracker.onInvalidate(function () {\n      Blaze._destroyView(view);\n    });\n  } else {\n    Blaze._destroyView(view);\n  }\n\n  return result;\n}; // Options: `parentView`\n\n\nBlaze._HTMLJSExpander = HTML.TransformingVisitor.extend();\n\nBlaze._HTMLJSExpander.def({\n  visitObject: function (x) {\n    if (x instanceof Blaze.Template) x = x.constructView();\n    if (x instanceof Blaze.View) return Blaze._expandView(x, this.parentView); // this will throw an error; other objects are not allowed!\n\n    return HTML.TransformingVisitor.prototype.visitObject.call(this, x);\n  },\n  visitAttributes: function (attrs) {\n    // expand dynamic attributes\n    if (typeof attrs === 'function') attrs = Blaze._withCurrentView(this.parentView, attrs); // call super (e.g. for case where `attrs` is an array)\n\n    return HTML.TransformingVisitor.prototype.visitAttributes.call(this, attrs);\n  },\n  visitAttribute: function (name, value, tag) {\n    // expand attribute values that are functions.  Any attribute value\n    // that contains Views must be wrapped in a function.\n    if (typeof value === 'function') value = Blaze._withCurrentView(this.parentView, value);\n    return HTML.TransformingVisitor.prototype.visitAttribute.call(this, name, value, tag);\n  }\n}); // Return Blaze.currentView, but only if it is being rendered\n// (i.e. we are in its render() method).\n\n\nvar currentViewIfRendering = function () {\n  var view = Blaze.currentView;\n  return view && view._isInRender ? view : null;\n};\n\nBlaze._expand = function (htmljs, parentView) {\n  parentView = parentView || currentViewIfRendering();\n  return new Blaze._HTMLJSExpander({\n    parentView: parentView\n  }).visit(htmljs);\n};\n\nBlaze._expandAttributes = function (attrs, parentView) {\n  parentView = parentView || currentViewIfRendering();\n  return new Blaze._HTMLJSExpander({\n    parentView: parentView\n  }).visitAttributes(attrs);\n};\n\nBlaze._destroyView = function (view, _skipNodes) {\n  if (view.isDestroyed) return;\n  view.isDestroyed = true;\n\n  Blaze._fireCallbacks(view, 'destroyed'); // Destroy views and elements recursively.  If _skipNodes,\n  // only recurse up to views, not elements, for the case where\n  // the backend (jQuery) is recursing over the elements already.\n\n\n  if (view._domrange) view._domrange.destroyMembers(_skipNodes);\n};\n\nBlaze._destroyNode = function (node) {\n  if (node.nodeType === 1) Blaze._DOMBackend.Teardown.tearDownElement(node);\n}; // Are the HTMLjs entities `a` and `b` the same?  We could be\n// more elaborate here but the point is to catch the most basic\n// cases.\n\n\nBlaze._isContentEqual = function (a, b) {\n  if (a instanceof HTML.Raw) {\n    return b instanceof HTML.Raw && a.value === b.value;\n  } else if (a == null) {\n    return b == null;\n  } else {\n    return a === b && (typeof a === 'number' || typeof a === 'boolean' || typeof a === 'string');\n  }\n};\n/**\n * @summary The View corresponding to the current template helper, event handler, callback, or autorun.  If there isn't one, `null`.\n * @locus Client\n * @type {Blaze.View}\n */\n\n\nBlaze.currentView = null;\n\nBlaze._withCurrentView = function (view, func) {\n  var oldView = Blaze.currentView;\n\n  try {\n    Blaze.currentView = view;\n    return func();\n  } finally {\n    Blaze.currentView = oldView;\n  }\n}; // Blaze.render publicly takes a View or a Template.\n// Privately, it takes any HTMLJS (extended with Views and Templates)\n// except null or undefined, or a function that returns any extended\n// HTMLJS.\n\n\nvar checkRenderContent = function (content) {\n  if (content === null) throw new Error(\"Can't render null\");\n  if (typeof content === 'undefined') throw new Error(\"Can't render undefined\");\n  if (content instanceof Blaze.View || content instanceof Blaze.Template || typeof content === 'function') return;\n\n  try {\n    // Throw if content doesn't look like HTMLJS at the top level\n    // (i.e. verify that this is an HTML.Tag, or an array,\n    // or a primitive, etc.)\n    new HTML.Visitor().visit(content);\n  } catch (e) {\n    // Make error message suitable for public API\n    throw new Error(\"Expected Template or View\");\n  }\n}; // For Blaze.render and Blaze.toHTML, take content and\n// wrap it in a View, unless it's a single View or\n// Template already.\n\n\nvar contentAsView = function (content) {\n  checkRenderContent(content);\n\n  if (content instanceof Blaze.Template) {\n    return content.constructView();\n  } else if (content instanceof Blaze.View) {\n    return content;\n  } else {\n    var func = content;\n\n    if (typeof func !== 'function') {\n      func = function () {\n        return content;\n      };\n    }\n\n    return Blaze.View('render', func);\n  }\n}; // For Blaze.renderWithData and Blaze.toHTMLWithData, wrap content\n// in a function, if necessary, so it can be a content arg to\n// a Blaze.With.\n\n\nvar contentAsFunc = function (content) {\n  checkRenderContent(content);\n\n  if (typeof content !== 'function') {\n    return function () {\n      return content;\n    };\n  } else {\n    return content;\n  }\n};\n/**\n * @summary Renders a template or View to DOM nodes and inserts it into the DOM, returning a rendered [View](#Blaze-View) which can be passed to [`Blaze.remove`](#Blaze-remove).\n * @locus Client\n * @param {Template|Blaze.View} templateOrView The template (e.g. `Template.myTemplate`) or View object to render.  If a template, a View object is [constructed](#template_constructview).  If a View, it must be an unrendered View, which becomes a rendered View and is returned.\n * @param {DOMNode} parentNode The node that will be the parent of the rendered template.  It must be an Element node.\n * @param {DOMNode} [nextNode] Optional. If provided, must be a child of <em>parentNode</em>; the template will be inserted before this node. If not provided, the template will be inserted as the last child of parentNode.\n * @param {Blaze.View} [parentView] Optional. If provided, it will be set as the rendered View's [`parentView`](#view_parentview).\n */\n\n\nBlaze.render = function (content, parentElement, nextNode, parentView) {\n  if (!parentElement) {\n    Blaze._warn(\"Blaze.render without a parent element is deprecated. \" + \"You must specify where to insert the rendered content.\");\n  }\n\n  if (nextNode instanceof Blaze.View) {\n    // handle omitted nextNode\n    parentView = nextNode;\n    nextNode = null;\n  } // parentElement must be a DOM node. in particular, can't be the\n  // result of a call to `$`. Can't check if `parentElement instanceof\n  // Node` since 'Node' is undefined in IE8.\n\n\n  if (parentElement && typeof parentElement.nodeType !== 'number') throw new Error(\"'parentElement' must be a DOM node\");\n  if (nextNode && typeof nextNode.nodeType !== 'number') // 'nextNode' is optional\n    throw new Error(\"'nextNode' must be a DOM node\");\n  parentView = parentView || currentViewIfRendering();\n  var view = contentAsView(content);\n\n  Blaze._materializeView(view, parentView);\n\n  if (parentElement) {\n    view._domrange.attach(parentElement, nextNode);\n  }\n\n  return view;\n};\n\nBlaze.insert = function (view, parentElement, nextNode) {\n  Blaze._warn(\"Blaze.insert has been deprecated.  Specify where to insert the \" + \"rendered content in the call to Blaze.render.\");\n\n  if (!(view && view._domrange instanceof Blaze._DOMRange)) throw new Error(\"Expected template rendered with Blaze.render\");\n\n  view._domrange.attach(parentElement, nextNode);\n};\n/**\n * @summary Renders a template or View to DOM nodes with a data context.  Otherwise identical to `Blaze.render`.\n * @locus Client\n * @param {Template|Blaze.View} templateOrView The template (e.g. `Template.myTemplate`) or View object to render.\n * @param {Object|Function} data The data context to use, or a function returning a data context.  If a function is provided, it will be reactively re-run.\n * @param {DOMNode} parentNode The node that will be the parent of the rendered template.  It must be an Element node.\n * @param {DOMNode} [nextNode] Optional. If provided, must be a child of <em>parentNode</em>; the template will be inserted before this node. If not provided, the template will be inserted as the last child of parentNode.\n * @param {Blaze.View} [parentView] Optional. If provided, it will be set as the rendered View's [`parentView`](#view_parentview).\n */\n\n\nBlaze.renderWithData = function (content, data, parentElement, nextNode, parentView) {\n  // We defer the handling of optional arguments to Blaze.render.  At this point,\n  // `nextNode` may actually be `parentView`.\n  return Blaze.render(Blaze._TemplateWith(data, contentAsFunc(content)), parentElement, nextNode, parentView);\n};\n/**\n * @summary Removes a rendered View from the DOM, stopping all reactive updates and event listeners on it. Also destroys the Blaze.Template instance associated with the view.\n * @locus Client\n * @param {Blaze.View} renderedView The return value from `Blaze.render` or `Blaze.renderWithData`, or the `view` property of a Blaze.Template instance. Calling `Blaze.remove(Template.instance().view)` from within a template event handler will destroy the view as well as that template and trigger the template's `onDestroyed` handlers.\n */\n\n\nBlaze.remove = function (view) {\n  if (!(view && view._domrange instanceof Blaze._DOMRange)) throw new Error(\"Expected template rendered with Blaze.render\");\n\n  while (view) {\n    if (!view.isDestroyed) {\n      var range = view._domrange;\n      if (range.attached && !range.parentRange) range.detach();\n      range.destroy();\n    }\n\n    view = view._hasGeneratedParent && view.parentView;\n  }\n};\n/**\n * @summary Renders a template or View to a string of HTML.\n * @locus Client\n * @param {Template|Blaze.View} templateOrView The template (e.g. `Template.myTemplate`) or View object from which to generate HTML.\n */\n\n\nBlaze.toHTML = function (content, parentView) {\n  parentView = parentView || currentViewIfRendering();\n  return HTML.toHTML(Blaze._expandView(contentAsView(content), parentView));\n};\n/**\n * @summary Renders a template or View to HTML with a data context.  Otherwise identical to `Blaze.toHTML`.\n * @locus Client\n * @param {Template|Blaze.View} templateOrView The template (e.g. `Template.myTemplate`) or View object from which to generate HTML.\n * @param {Object|Function} data The data context to use, or a function returning a data context.\n */\n\n\nBlaze.toHTMLWithData = function (content, data, parentView) {\n  parentView = parentView || currentViewIfRendering();\n  return HTML.toHTML(Blaze._expandView(Blaze._TemplateWith(data, contentAsFunc(content)), parentView));\n};\n\nBlaze._toText = function (htmljs, parentView, textMode) {\n  if (typeof htmljs === 'function') throw new Error(\"Blaze._toText doesn't take a function, just HTMLjs\");\n\n  if (parentView != null && !(parentView instanceof Blaze.View)) {\n    // omitted parentView argument\n    textMode = parentView;\n    parentView = null;\n  }\n\n  parentView = parentView || currentViewIfRendering();\n  if (!textMode) throw new Error(\"textMode required\");\n  if (!(textMode === HTML.TEXTMODE.STRING || textMode === HTML.TEXTMODE.RCDATA || textMode === HTML.TEXTMODE.ATTRIBUTE)) throw new Error(\"Unknown textMode: \" + textMode);\n  return HTML.toText(Blaze._expand(htmljs, parentView), textMode);\n};\n/**\n * @summary Returns the current data context, or the data context that was used when rendering a particular DOM element or View from a Meteor template.\n * @locus Client\n * @param {DOMElement|Blaze.View} [elementOrView] Optional.  An element that was rendered by a Meteor, or a View.\n */\n\n\nBlaze.getData = function (elementOrView) {\n  var theWith;\n\n  if (!elementOrView) {\n    theWith = Blaze.getView('with');\n  } else if (elementOrView instanceof Blaze.View) {\n    var view = elementOrView;\n    theWith = view.name === 'with' ? view : Blaze.getView(view, 'with');\n  } else if (typeof elementOrView.nodeType === 'number') {\n    if (elementOrView.nodeType !== 1) throw new Error(\"Expected DOM element\");\n    theWith = Blaze.getView(elementOrView, 'with');\n  } else {\n    throw new Error(\"Expected DOM element or View\");\n  }\n\n  return theWith ? theWith.dataVar.get() : null;\n}; // For back-compat\n\n\nBlaze.getElementData = function (element) {\n  Blaze._warn(\"Blaze.getElementData has been deprecated.  Use \" + \"Blaze.getData(element) instead.\");\n\n  if (element.nodeType !== 1) throw new Error(\"Expected DOM element\");\n  return Blaze.getData(element);\n}; // Both arguments are optional.\n\n/**\n * @summary Gets either the current View, or the View enclosing the given DOM element.\n * @locus Client\n * @param {DOMElement} [element] Optional.  If specified, the View enclosing `element` is returned.\n */\n\n\nBlaze.getView = function (elementOrView, _viewName) {\n  var viewName = _viewName;\n\n  if (typeof elementOrView === 'string') {\n    // omitted elementOrView; viewName present\n    viewName = elementOrView;\n    elementOrView = null;\n  } // We could eventually shorten the code by folding the logic\n  // from the other methods into this method.\n\n\n  if (!elementOrView) {\n    return Blaze._getCurrentView(viewName);\n  } else if (elementOrView instanceof Blaze.View) {\n    return Blaze._getParentView(elementOrView, viewName);\n  } else if (typeof elementOrView.nodeType === 'number') {\n    return Blaze._getElementView(elementOrView, viewName);\n  } else {\n    throw new Error(\"Expected DOM element or View\");\n  }\n}; // Gets the current view or its nearest ancestor of name\n// `name`.\n\n\nBlaze._getCurrentView = function (name) {\n  var view = Blaze.currentView; // Better to fail in cases where it doesn't make sense\n  // to use Blaze._getCurrentView().  There will be a current\n  // view anywhere it does.  You can check Blaze.currentView\n  // if you want to know whether there is one or not.\n\n  if (!view) throw new Error(\"There is no current view\");\n\n  if (name) {\n    while (view && view.name !== name) view = view.parentView;\n\n    return view || null;\n  } else {\n    // Blaze._getCurrentView() with no arguments just returns\n    // Blaze.currentView.\n    return view;\n  }\n};\n\nBlaze._getParentView = function (view, name) {\n  var v = view.parentView;\n\n  if (name) {\n    while (v && v.name !== name) v = v.parentView;\n  }\n\n  return v || null;\n};\n\nBlaze._getElementView = function (elem, name) {\n  var range = Blaze._DOMRange.forElement(elem);\n\n  var view = null;\n\n  while (range && !view) {\n    view = range.view || null;\n\n    if (!view) {\n      if (range.parentRange) range = range.parentRange;else range = Blaze._DOMRange.forElement(range.parentElement);\n    }\n  }\n\n  if (name) {\n    while (view && view.name !== name) view = view.parentView;\n\n    return view || null;\n  } else {\n    return view;\n  }\n};\n\nBlaze._addEventMap = function (view, eventMap, thisInHandler) {\n  thisInHandler = thisInHandler || null;\n  var handles = [];\n  if (!view._domrange) throw new Error(\"View must have a DOMRange\");\n\n  view._domrange.onAttached(function attached_eventMaps(range, element) {\n    _.each(eventMap, function (handler, spec) {\n      var clauses = spec.split(/,\\s+/); // iterate over clauses of spec, e.g. ['click .foo', 'click .bar']\n\n      _.each(clauses, function (clause) {\n        var parts = clause.split(/\\s+/);\n        if (parts.length === 0) return;\n        var newEvents = parts.shift();\n        var selector = parts.join(' ');\n        handles.push(Blaze._EventSupport.listen(element, newEvents, selector, function (evt) {\n          if (!range.containsElement(evt.currentTarget)) return null;\n          var handlerThis = thisInHandler || this;\n          var handlerArgs = arguments;\n          return Blaze._withCurrentView(view, function () {\n            return handler.apply(handlerThis, handlerArgs);\n          });\n        }, range, function (r) {\n          return r.parentRange;\n        }));\n      });\n    });\n  });\n\n  view.onViewDestroyed(function () {\n    _.each(handles, function (h) {\n      h.stop();\n    });\n\n    handles.length = 0;\n  });\n};","map":{"version":3,"sources":["packages/blaze/view.js"],"names":["Blaze","View","name","render","_render","_callbacks","created","rendered","destroyed","isCreated","_isCreatedForExpansion","isRendered","_isAttached","isDestroyed","_isInRender","parentView","_domrange","_hasGeneratedParent","_scopeBindings","renderCount","prototype","onViewCreated","cb","push","_onViewRendered","onViewReady","self","fire","Tracker","afterFlush","_withCurrentView","call","onViewRendered","attached","onAttached","onViewDestroyed","removeViewDestroyedListener","index","_","lastIndexOf","autorun","f","_inViewScope","displayName","Error","templateInstanceFunc","Template","_currentTemplateInstanceFunc","func","viewAutorun","c","_withTemplateInstanceFunc","comp","stopComputation","stop","onStop","_errorIfShouldntCallSubscribe","subscribe","args","options","subHandle","connection","apply","Meteor","firstNode","lastNode","_fireCallbacks","view","which","nonreactive","fireCallbacks","cbs","i","N","length","_createView","forExpansion","doFirstRender","initialContent","domrange","_DOMRange","teardownHook","range","element","_DOMBackend","Teardown","onElementTeardown","teardown","_destroyView","_materializeView","_workStack","_intoArray","lastHtmljs","doRender","htmljs","firstRun","_isContentEqual","doMaterialize","rangesAndNodes","_materializeDOM","setMembers","onInvalidate","destroyMembers","undefined","initialContents","_bind","_expandView","result","_expand","active","_HTMLJSExpander","HTML","TransformingVisitor","extend","def","visitObject","x","constructView","visitAttributes","attrs","visitAttribute","value","tag","currentViewIfRendering","currentView","visit","_expandAttributes","_skipNodes","_destroyNode","node","nodeType","tearDownElement","a","b","Raw","oldView","checkRenderContent","content","Visitor","e","contentAsView","contentAsFunc","parentElement","nextNode","_warn","attach","insert","renderWithData","data","_TemplateWith","remove","parentRange","detach","destroy","toHTML","toHTMLWithData","_toText","textMode","TEXTMODE","STRING","RCDATA","ATTRIBUTE","toText","getData","elementOrView","theWith","getView","dataVar","get","getElementData","_viewName","viewName","_getCurrentView","_getParentView","_getElementView","v","elem","forElement","_addEventMap","eventMap","thisInHandler","handles","attached_eventMaps","each","handler","spec","clauses","split","clause","parts","newEvents","shift","selector","join","_EventSupport","listen","evt","containsElement","currentTarget","handlerThis","handlerArgs","arguments","r","h"],"mappings":"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","sourcesContent":["/// [new] Blaze.View([name], renderMethod)\n///\n/// Blaze.View is the building block of reactive DOM.  Views have\n/// the following features:\n///\n/// * lifecycle callbacks - Views are created, rendered, and destroyed,\n///   and callbacks can be registered to fire when these things happen.\n///\n/// * parent pointer - A View points to its parentView, which is the\n///   View that caused it to be rendered.  These pointers form a\n///   hierarchy or tree of Views.\n///\n/// * render() method - A View's render() method specifies the DOM\n///   (or HTML) content of the View.  If the method establishes\n///   reactive dependencies, it may be re-run.\n///\n/// * a DOMRange - If a View is rendered to DOM, its position and\n///   extent in the DOM are tracked using a DOMRange object.\n///\n/// When a View is constructed by calling Blaze.View, the View is\n/// not yet considered \"created.\"  It doesn't have a parentView yet,\n/// and no logic has been run to initialize the View.  All real\n/// work is deferred until at least creation time, when the onViewCreated\n/// callbacks are fired, which happens when the View is \"used\" in\n/// some way that requires it to be rendered.\n///\n/// ...more lifecycle stuff\n///\n/// `name` is an optional string tag identifying the View.  The only\n/// time it's used is when looking in the View tree for a View of a\n/// particular name; for example, data contexts are stored on Views\n/// of name \"with\".  Names are also useful when debugging, so in\n/// general it's good for functions that create Views to set the name.\n/// Views associated with templates have names of the form \"Template.foo\".\n\n/**\n * @class\n * @summary Constructor for a View, which represents a reactive region of DOM.\n * @locus Client\n * @param {String} [name] Optional.  A name for this type of View.  See [`view.name`](#view_name).\n * @param {Function} renderFunction A function that returns [*renderable content*](#Renderable-Content).  In this function, `this` is bound to the View.\n */\nBlaze.View = function (name, render) {\n  if (! (this instanceof Blaze.View))\n    // called without `new`\n    return new Blaze.View(name, render);\n\n  if (typeof name === 'function') {\n    // omitted \"name\" argument\n    render = name;\n    name = '';\n  }\n  this.name = name;\n  this._render = render;\n\n  this._callbacks = {\n    created: null,\n    rendered: null,\n    destroyed: null\n  };\n\n  // Setting all properties here is good for readability,\n  // and also may help Chrome optimize the code by keeping\n  // the View object from changing shape too much.\n  this.isCreated = false;\n  this._isCreatedForExpansion = false;\n  this.isRendered = false;\n  this._isAttached = false;\n  this.isDestroyed = false;\n  this._isInRender = false;\n  this.parentView = null;\n  this._domrange = null;\n  // This flag is normally set to false except for the cases when view's parent\n  // was generated as part of expanding some syntactic sugar expressions or\n  // methods.\n  // Ex.: Blaze.renderWithData is an equivalent to creating a view with regular\n  // Blaze.render and wrapping it into {{#with data}}{{/with}} view. Since the\n  // users don't know anything about these generated parent views, Blaze needs\n  // this information to be available on views to make smarter decisions. For\n  // example: removing the generated parent view with the view on Blaze.remove.\n  this._hasGeneratedParent = false;\n  // Bindings accessible to children views (via view.lookup('name')) within the\n  // closest template view.\n  this._scopeBindings = {};\n\n  this.renderCount = 0;\n};\n\nBlaze.View.prototype._render = function () { return null; };\n\nBlaze.View.prototype.onViewCreated = function (cb) {\n  this._callbacks.created = this._callbacks.created || [];\n  this._callbacks.created.push(cb);\n};\n\nBlaze.View.prototype._onViewRendered = function (cb) {\n  this._callbacks.rendered = this._callbacks.rendered || [];\n  this._callbacks.rendered.push(cb);\n};\n\nBlaze.View.prototype.onViewReady = function (cb) {\n  var self = this;\n  var fire = function () {\n    Tracker.afterFlush(function () {\n      if (! self.isDestroyed) {\n        Blaze._withCurrentView(self, function () {\n          cb.call(self);\n        });\n      }\n    });\n  };\n  self._onViewRendered(function onViewRendered() {\n    if (self.isDestroyed)\n      return;\n    if (! self._domrange.attached)\n      self._domrange.onAttached(fire);\n    else\n      fire();\n  });\n};\n\nBlaze.View.prototype.onViewDestroyed = function (cb) {\n  this._callbacks.destroyed = this._callbacks.destroyed || [];\n  this._callbacks.destroyed.push(cb);\n};\nBlaze.View.prototype.removeViewDestroyedListener = function (cb) {\n  var destroyed = this._callbacks.destroyed;\n  if (! destroyed)\n    return;\n  var index = _.lastIndexOf(destroyed, cb);\n  if (index !== -1) {\n    // XXX You'd think the right thing to do would be splice, but _fireCallbacks\n    // gets sad if you remove callbacks while iterating over the list.  Should\n    // change this to use callback-hook or EventEmitter or something else that\n    // properly supports removal.\n    destroyed[index] = null;\n  }\n};\n\n/// View#autorun(func)\n///\n/// Sets up a Tracker autorun that is \"scoped\" to this View in two\n/// important ways: 1) Blaze.currentView is automatically set\n/// on every re-run, and 2) the autorun is stopped when the\n/// View is destroyed.  As with Tracker.autorun, the first run of\n/// the function is immediate, and a Computation object that can\n/// be used to stop the autorun is returned.\n///\n/// View#autorun is meant to be called from View callbacks like\n/// onViewCreated, or from outside the rendering process.  It may not\n/// be called before the onViewCreated callbacks are fired (too early),\n/// or from a render() method (too confusing).\n///\n/// Typically, autoruns that update the state\n/// of the View (as in Blaze.With) should be started from an onViewCreated\n/// callback.  Autoruns that update the DOM should be started\n/// from either onViewCreated (guarded against the absence of\n/// view._domrange), or onViewReady.\nBlaze.View.prototype.autorun = function (f, _inViewScope, displayName) {\n  var self = this;\n\n  // The restrictions on when View#autorun can be called are in order\n  // to avoid bad patterns, like creating a Blaze.View and immediately\n  // calling autorun on it.  A freshly created View is not ready to\n  // have logic run on it; it doesn't have a parentView, for example.\n  // It's when the View is materialized or expanded that the onViewCreated\n  // handlers are fired and the View starts up.\n  //\n  // Letting the render() method call `this.autorun()` is problematic\n  // because of re-render.  The best we can do is to stop the old\n  // autorun and start a new one for each render, but that's a pattern\n  // we try to avoid internally because it leads to helpers being\n  // called extra times, in the case where the autorun causes the\n  // view to re-render (and thus the autorun to be torn down and a\n  // new one established).\n  //\n  // We could lift these restrictions in various ways.  One interesting\n  // idea is to allow you to call `view.autorun` after instantiating\n  // `view`, and automatically wrap it in `view.onViewCreated`, deferring\n  // the autorun so that it starts at an appropriate time.  However,\n  // then we can't return the Computation object to the caller, because\n  // it doesn't exist yet.\n  if (! self.isCreated) {\n    throw new Error(\"View#autorun must be called from the created callback at the earliest\");\n  }\n  if (this._isInRender) {\n    throw new Error(\"Can't call View#autorun from inside render(); try calling it from the created or rendered callback\");\n  }\n\n  var templateInstanceFunc = Blaze.Template._currentTemplateInstanceFunc;\n\n  var func = function viewAutorun(c) {\n    return Blaze._withCurrentView(_inViewScope || self, function () {\n      return Blaze.Template._withTemplateInstanceFunc(\n        templateInstanceFunc, function () {\n          return f.call(self, c);\n        });\n    });\n  };\n\n  // Give the autorun function a better name for debugging and profiling.\n  // The `displayName` property is not part of the spec but browsers like Chrome\n  // and Firefox prefer it in debuggers over the name function was declared by.\n  func.displayName =\n    (self.name || 'anonymous') + ':' + (displayName || 'anonymous');\n  var comp = Tracker.autorun(func);\n\n  var stopComputation = function () { comp.stop(); };\n  self.onViewDestroyed(stopComputation);\n  comp.onStop(function () {\n    self.removeViewDestroyedListener(stopComputation);\n  });\n\n  return comp;\n};\n\nBlaze.View.prototype._errorIfShouldntCallSubscribe = function () {\n  var self = this;\n\n  if (! self.isCreated) {\n    throw new Error(\"View#subscribe must be called from the created callback at the earliest\");\n  }\n  if (self._isInRender) {\n    throw new Error(\"Can't call View#subscribe from inside render(); try calling it from the created or rendered callback\");\n  }\n  if (self.isDestroyed) {\n    throw new Error(\"Can't call View#subscribe from inside the destroyed callback, try calling it inside created or rendered.\");\n  }\n};\n\n/**\n * Just like Blaze.View#autorun, but with Meteor.subscribe instead of\n * Tracker.autorun. Stop the subscription when the view is destroyed.\n * @return {SubscriptionHandle} A handle to the subscription so that you can\n * see if it is ready, or stop it manually\n */\nBlaze.View.prototype.subscribe = function (args, options) {\n  var self = this;\n  options = options || {};\n\n  self._errorIfShouldntCallSubscribe();\n\n  var subHandle;\n  if (options.connection) {\n    subHandle = options.connection.subscribe.apply(options.connection, args);\n  } else {\n    subHandle = Meteor.subscribe.apply(Meteor, args);\n  }\n\n  self.onViewDestroyed(function () {\n    subHandle.stop();\n  });\n\n  return subHandle;\n};\n\nBlaze.View.prototype.firstNode = function () {\n  if (! this._isAttached)\n    throw new Error(\"View must be attached before accessing its DOM\");\n\n  return this._domrange.firstNode();\n};\n\nBlaze.View.prototype.lastNode = function () {\n  if (! this._isAttached)\n    throw new Error(\"View must be attached before accessing its DOM\");\n\n  return this._domrange.lastNode();\n};\n\nBlaze._fireCallbacks = function (view, which) {\n  Blaze._withCurrentView(view, function () {\n    Tracker.nonreactive(function fireCallbacks() {\n      var cbs = view._callbacks[which];\n      for (var i = 0, N = (cbs && cbs.length); i < N; i++)\n        cbs[i] && cbs[i].call(view);\n    });\n  });\n};\n\nBlaze._createView = function (view, parentView, forExpansion) {\n  if (view.isCreated)\n    throw new Error(\"Can't render the same View twice\");\n\n  view.parentView = (parentView || null);\n  view.isCreated = true;\n  if (forExpansion)\n    view._isCreatedForExpansion = true;\n\n  Blaze._fireCallbacks(view, 'created');\n};\n\nvar doFirstRender = function (view, initialContent) {\n  var domrange = new Blaze._DOMRange(initialContent);\n  view._domrange = domrange;\n  domrange.view = view;\n  view.isRendered = true;\n  Blaze._fireCallbacks(view, 'rendered');\n\n  var teardownHook = null;\n\n  domrange.onAttached(function attached(range, element) {\n    view._isAttached = true;\n\n    teardownHook = Blaze._DOMBackend.Teardown.onElementTeardown(\n      element, function teardown() {\n        Blaze._destroyView(view, true /* _skipNodes */);\n      });\n  });\n\n  // tear down the teardown hook\n  view.onViewDestroyed(function () {\n    teardownHook && teardownHook.stop();\n    teardownHook = null;\n  });\n\n  return domrange;\n};\n\n// Take an uncreated View `view` and create and render it to DOM,\n// setting up the autorun that updates the View.  Returns a new\n// DOMRange, which has been associated with the View.\n//\n// The private arguments `_workStack` and `_intoArray` are passed in\n// by Blaze._materializeDOM and are only present for recursive calls\n// (when there is some other _materializeView on the stack).  If\n// provided, then we avoid the mutual recursion of calling back into\n// Blaze._materializeDOM so that deep View hierarchies don't blow the\n// stack.  Instead, we push tasks onto workStack for the initial\n// rendering and subsequent setup of the View, and they are done after\n// we return.  When there is a _workStack, we do not return the new\n// DOMRange, but instead push it into _intoArray from a _workStack\n// task.\nBlaze._materializeView = function (view, parentView, _workStack, _intoArray) {\n  Blaze._createView(view, parentView);\n\n  var domrange;\n  var lastHtmljs;\n  // We don't expect to be called in a Computation, but just in case,\n  // wrap in Tracker.nonreactive.\n  Tracker.nonreactive(function () {\n    view.autorun(function doRender(c) {\n      // `view.autorun` sets the current view.\n      view.renderCount++;\n      view._isInRender = true;\n      // Any dependencies that should invalidate this Computation come\n      // from this line:\n      var htmljs = view._render();\n      view._isInRender = false;\n\n      if (! c.firstRun && ! Blaze._isContentEqual(lastHtmljs, htmljs)) {\n        Tracker.nonreactive(function doMaterialize() {\n          // re-render\n          var rangesAndNodes = Blaze._materializeDOM(htmljs, [], view);\n          domrange.setMembers(rangesAndNodes);\n          Blaze._fireCallbacks(view, 'rendered');\n        });\n      }\n      lastHtmljs = htmljs;\n\n      // Causes any nested views to stop immediately, not when we call\n      // `setMembers` the next time around the autorun.  Otherwise,\n      // helpers in the DOM tree to be replaced might be scheduled\n      // to re-run before we have a chance to stop them.\n      Tracker.onInvalidate(function () {\n        if (domrange) {\n          domrange.destroyMembers();\n        }\n      });\n    }, undefined, 'materialize');\n\n    // first render.  lastHtmljs is the first htmljs.\n    var initialContents;\n    if (! _workStack) {\n      initialContents = Blaze._materializeDOM(lastHtmljs, [], view);\n      domrange = doFirstRender(view, initialContents);\n      initialContents = null; // help GC because we close over this scope a lot\n    } else {\n      // We're being called from Blaze._materializeDOM, so to avoid\n      // recursion and save stack space, provide a description of the\n      // work to be done instead of doing it.  Tasks pushed onto\n      // _workStack will be done in LIFO order after we return.\n      // The work will still be done within a Tracker.nonreactive,\n      // because it will be done by some call to Blaze._materializeDOM\n      // (which is always called in a Tracker.nonreactive).\n      initialContents = [];\n      // push this function first so that it happens last\n      _workStack.push(function () {\n        domrange = doFirstRender(view, initialContents);\n        initialContents = null; // help GC because of all the closures here\n        _intoArray.push(domrange);\n      });\n      // now push the task that calculates initialContents\n      _workStack.push(Blaze._bind(Blaze._materializeDOM, null,\n                             lastHtmljs, initialContents, view, _workStack));\n    }\n  });\n\n  if (! _workStack) {\n    return domrange;\n  } else {\n    return null;\n  }\n};\n\n// Expands a View to HTMLjs, calling `render` recursively on all\n// Views and evaluating any dynamic attributes.  Calls the `created`\n// callback, but not the `materialized` or `rendered` callbacks.\n// Destroys the view immediately, unless called in a Tracker Computation,\n// in which case the view will be destroyed when the Computation is\n// invalidated.  If called in a Tracker Computation, the result is a\n// reactive string; that is, the Computation will be invalidated\n// if any changes are made to the view or subviews that might affect\n// the HTML.\nBlaze._expandView = function (view, parentView) {\n  Blaze._createView(view, parentView, true /*forExpansion*/);\n\n  view._isInRender = true;\n  var htmljs = Blaze._withCurrentView(view, function () {\n    return view._render();\n  });\n  view._isInRender = false;\n\n  var result = Blaze._expand(htmljs, view);\n\n  if (Tracker.active) {\n    Tracker.onInvalidate(function () {\n      Blaze._destroyView(view);\n    });\n  } else {\n    Blaze._destroyView(view);\n  }\n\n  return result;\n};\n\n// Options: `parentView`\nBlaze._HTMLJSExpander = HTML.TransformingVisitor.extend();\nBlaze._HTMLJSExpander.def({\n  visitObject: function (x) {\n    if (x instanceof Blaze.Template)\n      x = x.constructView();\n    if (x instanceof Blaze.View)\n      return Blaze._expandView(x, this.parentView);\n\n    // this will throw an error; other objects are not allowed!\n    return HTML.TransformingVisitor.prototype.visitObject.call(this, x);\n  },\n  visitAttributes: function (attrs) {\n    // expand dynamic attributes\n    if (typeof attrs === 'function')\n      attrs = Blaze._withCurrentView(this.parentView, attrs);\n\n    // call super (e.g. for case where `attrs` is an array)\n    return HTML.TransformingVisitor.prototype.visitAttributes.call(this, attrs);\n  },\n  visitAttribute: function (name, value, tag) {\n    // expand attribute values that are functions.  Any attribute value\n    // that contains Views must be wrapped in a function.\n    if (typeof value === 'function')\n      value = Blaze._withCurrentView(this.parentView, value);\n\n    return HTML.TransformingVisitor.prototype.visitAttribute.call(\n      this, name, value, tag);\n  }\n});\n\n// Return Blaze.currentView, but only if it is being rendered\n// (i.e. we are in its render() method).\nvar currentViewIfRendering = function () {\n  var view = Blaze.currentView;\n  return (view && view._isInRender) ? view : null;\n};\n\nBlaze._expand = function (htmljs, parentView) {\n  parentView = parentView || currentViewIfRendering();\n  return (new Blaze._HTMLJSExpander(\n    {parentView: parentView})).visit(htmljs);\n};\n\nBlaze._expandAttributes = function (attrs, parentView) {\n  parentView = parentView || currentViewIfRendering();\n  return (new Blaze._HTMLJSExpander(\n    {parentView: parentView})).visitAttributes(attrs);\n};\n\nBlaze._destroyView = function (view, _skipNodes) {\n  if (view.isDestroyed)\n    return;\n  view.isDestroyed = true;\n\n  Blaze._fireCallbacks(view, 'destroyed');\n\n  // Destroy views and elements recursively.  If _skipNodes,\n  // only recurse up to views, not elements, for the case where\n  // the backend (jQuery) is recursing over the elements already.\n\n  if (view._domrange)\n    view._domrange.destroyMembers(_skipNodes);\n};\n\nBlaze._destroyNode = function (node) {\n  if (node.nodeType === 1)\n    Blaze._DOMBackend.Teardown.tearDownElement(node);\n};\n\n// Are the HTMLjs entities `a` and `b` the same?  We could be\n// more elaborate here but the point is to catch the most basic\n// cases.\nBlaze._isContentEqual = function (a, b) {\n  if (a instanceof HTML.Raw) {\n    return (b instanceof HTML.Raw) && (a.value === b.value);\n  } else if (a == null) {\n    return (b == null);\n  } else {\n    return (a === b) &&\n      ((typeof a === 'number') || (typeof a === 'boolean') ||\n       (typeof a === 'string'));\n  }\n};\n\n/**\n * @summary The View corresponding to the current template helper, event handler, callback, or autorun.  If there isn't one, `null`.\n * @locus Client\n * @type {Blaze.View}\n */\nBlaze.currentView = null;\n\nBlaze._withCurrentView = function (view, func) {\n  var oldView = Blaze.currentView;\n  try {\n    Blaze.currentView = view;\n    return func();\n  } finally {\n    Blaze.currentView = oldView;\n  }\n};\n\n// Blaze.render publicly takes a View or a Template.\n// Privately, it takes any HTMLJS (extended with Views and Templates)\n// except null or undefined, or a function that returns any extended\n// HTMLJS.\nvar checkRenderContent = function (content) {\n  if (content === null)\n    throw new Error(\"Can't render null\");\n  if (typeof content === 'undefined')\n    throw new Error(\"Can't render undefined\");\n\n  if ((content instanceof Blaze.View) ||\n      (content instanceof Blaze.Template) ||\n      (typeof content === 'function'))\n    return;\n\n  try {\n    // Throw if content doesn't look like HTMLJS at the top level\n    // (i.e. verify that this is an HTML.Tag, or an array,\n    // or a primitive, etc.)\n    (new HTML.Visitor).visit(content);\n  } catch (e) {\n    // Make error message suitable for public API\n    throw new Error(\"Expected Template or View\");\n  }\n};\n\n// For Blaze.render and Blaze.toHTML, take content and\n// wrap it in a View, unless it's a single View or\n// Template already.\nvar contentAsView = function (content) {\n  checkRenderContent(content);\n\n  if (content instanceof Blaze.Template) {\n    return content.constructView();\n  } else if (content instanceof Blaze.View) {\n    return content;\n  } else {\n    var func = content;\n    if (typeof func !== 'function') {\n      func = function () {\n        return content;\n      };\n    }\n    return Blaze.View('render', func);\n  }\n};\n\n// For Blaze.renderWithData and Blaze.toHTMLWithData, wrap content\n// in a function, if necessary, so it can be a content arg to\n// a Blaze.With.\nvar contentAsFunc = function (content) {\n  checkRenderContent(content);\n\n  if (typeof content !== 'function') {\n    return function () {\n      return content;\n    };\n  } else {\n    return content;\n  }\n};\n\n/**\n * @summary Renders a template or View to DOM nodes and inserts it into the DOM, returning a rendered [View](#Blaze-View) which can be passed to [`Blaze.remove`](#Blaze-remove).\n * @locus Client\n * @param {Template|Blaze.View} templateOrView The template (e.g. `Template.myTemplate`) or View object to render.  If a template, a View object is [constructed](#template_constructview).  If a View, it must be an unrendered View, which becomes a rendered View and is returned.\n * @param {DOMNode} parentNode The node that will be the parent of the rendered template.  It must be an Element node.\n * @param {DOMNode} [nextNode] Optional. If provided, must be a child of <em>parentNode</em>; the template will be inserted before this node. If not provided, the template will be inserted as the last child of parentNode.\n * @param {Blaze.View} [parentView] Optional. If provided, it will be set as the rendered View's [`parentView`](#view_parentview).\n */\nBlaze.render = function (content, parentElement, nextNode, parentView) {\n  if (! parentElement) {\n    Blaze._warn(\"Blaze.render without a parent element is deprecated. \" +\n                \"You must specify where to insert the rendered content.\");\n  }\n\n  if (nextNode instanceof Blaze.View) {\n    // handle omitted nextNode\n    parentView = nextNode;\n    nextNode = null;\n  }\n\n  // parentElement must be a DOM node. in particular, can't be the\n  // result of a call to `$`. Can't check if `parentElement instanceof\n  // Node` since 'Node' is undefined in IE8.\n  if (parentElement && typeof parentElement.nodeType !== 'number')\n    throw new Error(\"'parentElement' must be a DOM node\");\n  if (nextNode && typeof nextNode.nodeType !== 'number') // 'nextNode' is optional\n    throw new Error(\"'nextNode' must be a DOM node\");\n\n  parentView = parentView || currentViewIfRendering();\n\n  var view = contentAsView(content);\n  Blaze._materializeView(view, parentView);\n\n  if (parentElement) {\n    view._domrange.attach(parentElement, nextNode);\n  }\n\n  return view;\n};\n\nBlaze.insert = function (view, parentElement, nextNode) {\n  Blaze._warn(\"Blaze.insert has been deprecated.  Specify where to insert the \" +\n              \"rendered content in the call to Blaze.render.\");\n\n  if (! (view && (view._domrange instanceof Blaze._DOMRange)))\n    throw new Error(\"Expected template rendered with Blaze.render\");\n\n  view._domrange.attach(parentElement, nextNode);\n};\n\n/**\n * @summary Renders a template or View to DOM nodes with a data context.  Otherwise identical to `Blaze.render`.\n * @locus Client\n * @param {Template|Blaze.View} templateOrView The template (e.g. `Template.myTemplate`) or View object to render.\n * @param {Object|Function} data The data context to use, or a function returning a data context.  If a function is provided, it will be reactively re-run.\n * @param {DOMNode} parentNode The node that will be the parent of the rendered template.  It must be an Element node.\n * @param {DOMNode} [nextNode] Optional. If provided, must be a child of <em>parentNode</em>; the template will be inserted before this node. If not provided, the template will be inserted as the last child of parentNode.\n * @param {Blaze.View} [parentView] Optional. If provided, it will be set as the rendered View's [`parentView`](#view_parentview).\n */\nBlaze.renderWithData = function (content, data, parentElement, nextNode, parentView) {\n  // We defer the handling of optional arguments to Blaze.render.  At this point,\n  // `nextNode` may actually be `parentView`.\n  return Blaze.render(Blaze._TemplateWith(data, contentAsFunc(content)),\n                          parentElement, nextNode, parentView);\n};\n\n/**\n * @summary Removes a rendered View from the DOM, stopping all reactive updates and event listeners on it. Also destroys the Blaze.Template instance associated with the view.\n * @locus Client\n * @param {Blaze.View} renderedView The return value from `Blaze.render` or `Blaze.renderWithData`, or the `view` property of a Blaze.Template instance. Calling `Blaze.remove(Template.instance().view)` from within a template event handler will destroy the view as well as that template and trigger the template's `onDestroyed` handlers.\n */\nBlaze.remove = function (view) {\n  if (! (view && (view._domrange instanceof Blaze._DOMRange)))\n    throw new Error(\"Expected template rendered with Blaze.render\");\n\n  while (view) {\n    if (! view.isDestroyed) {\n      var range = view._domrange;\n      if (range.attached && ! range.parentRange)\n        range.detach();\n      range.destroy();\n    }\n\n    view = view._hasGeneratedParent && view.parentView;\n  }\n};\n\n/**\n * @summary Renders a template or View to a string of HTML.\n * @locus Client\n * @param {Template|Blaze.View} templateOrView The template (e.g. `Template.myTemplate`) or View object from which to generate HTML.\n */\nBlaze.toHTML = function (content, parentView) {\n  parentView = parentView || currentViewIfRendering();\n\n  return HTML.toHTML(Blaze._expandView(contentAsView(content), parentView));\n};\n\n/**\n * @summary Renders a template or View to HTML with a data context.  Otherwise identical to `Blaze.toHTML`.\n * @locus Client\n * @param {Template|Blaze.View} templateOrView The template (e.g. `Template.myTemplate`) or View object from which to generate HTML.\n * @param {Object|Function} data The data context to use, or a function returning a data context.\n */\nBlaze.toHTMLWithData = function (content, data, parentView) {\n  parentView = parentView || currentViewIfRendering();\n\n  return HTML.toHTML(Blaze._expandView(Blaze._TemplateWith(\n    data, contentAsFunc(content)), parentView));\n};\n\nBlaze._toText = function (htmljs, parentView, textMode) {\n  if (typeof htmljs === 'function')\n    throw new Error(\"Blaze._toText doesn't take a function, just HTMLjs\");\n\n  if ((parentView != null) && ! (parentView instanceof Blaze.View)) {\n    // omitted parentView argument\n    textMode = parentView;\n    parentView = null;\n  }\n  parentView = parentView || currentViewIfRendering();\n\n  if (! textMode)\n    throw new Error(\"textMode required\");\n  if (! (textMode === HTML.TEXTMODE.STRING ||\n         textMode === HTML.TEXTMODE.RCDATA ||\n         textMode === HTML.TEXTMODE.ATTRIBUTE))\n    throw new Error(\"Unknown textMode: \" + textMode);\n\n  return HTML.toText(Blaze._expand(htmljs, parentView), textMode);\n};\n\n/**\n * @summary Returns the current data context, or the data context that was used when rendering a particular DOM element or View from a Meteor template.\n * @locus Client\n * @param {DOMElement|Blaze.View} [elementOrView] Optional.  An element that was rendered by a Meteor, or a View.\n */\nBlaze.getData = function (elementOrView) {\n  var theWith;\n\n  if (! elementOrView) {\n    theWith = Blaze.getView('with');\n  } else if (elementOrView instanceof Blaze.View) {\n    var view = elementOrView;\n    theWith = (view.name === 'with' ? view :\n               Blaze.getView(view, 'with'));\n  } else if (typeof elementOrView.nodeType === 'number') {\n    if (elementOrView.nodeType !== 1)\n      throw new Error(\"Expected DOM element\");\n    theWith = Blaze.getView(elementOrView, 'with');\n  } else {\n    throw new Error(\"Expected DOM element or View\");\n  }\n\n  return theWith ? theWith.dataVar.get() : null;\n};\n\n// For back-compat\nBlaze.getElementData = function (element) {\n  Blaze._warn(\"Blaze.getElementData has been deprecated.  Use \" +\n              \"Blaze.getData(element) instead.\");\n\n  if (element.nodeType !== 1)\n    throw new Error(\"Expected DOM element\");\n\n  return Blaze.getData(element);\n};\n\n// Both arguments are optional.\n\n/**\n * @summary Gets either the current View, or the View enclosing the given DOM element.\n * @locus Client\n * @param {DOMElement} [element] Optional.  If specified, the View enclosing `element` is returned.\n */\nBlaze.getView = function (elementOrView, _viewName) {\n  var viewName = _viewName;\n\n  if ((typeof elementOrView) === 'string') {\n    // omitted elementOrView; viewName present\n    viewName = elementOrView;\n    elementOrView = null;\n  }\n\n  // We could eventually shorten the code by folding the logic\n  // from the other methods into this method.\n  if (! elementOrView) {\n    return Blaze._getCurrentView(viewName);\n  } else if (elementOrView instanceof Blaze.View) {\n    return Blaze._getParentView(elementOrView, viewName);\n  } else if (typeof elementOrView.nodeType === 'number') {\n    return Blaze._getElementView(elementOrView, viewName);\n  } else {\n    throw new Error(\"Expected DOM element or View\");\n  }\n};\n\n// Gets the current view or its nearest ancestor of name\n// `name`.\nBlaze._getCurrentView = function (name) {\n  var view = Blaze.currentView;\n  // Better to fail in cases where it doesn't make sense\n  // to use Blaze._getCurrentView().  There will be a current\n  // view anywhere it does.  You can check Blaze.currentView\n  // if you want to know whether there is one or not.\n  if (! view)\n    throw new Error(\"There is no current view\");\n\n  if (name) {\n    while (view && view.name !== name)\n      view = view.parentView;\n    return view || null;\n  } else {\n    // Blaze._getCurrentView() with no arguments just returns\n    // Blaze.currentView.\n    return view;\n  }\n};\n\nBlaze._getParentView = function (view, name) {\n  var v = view.parentView;\n\n  if (name) {\n    while (v && v.name !== name)\n      v = v.parentView;\n  }\n\n  return v || null;\n};\n\nBlaze._getElementView = function (elem, name) {\n  var range = Blaze._DOMRange.forElement(elem);\n  var view = null;\n  while (range && ! view) {\n    view = (range.view || null);\n    if (! view) {\n      if (range.parentRange)\n        range = range.parentRange;\n      else\n        range = Blaze._DOMRange.forElement(range.parentElement);\n    }\n  }\n\n  if (name) {\n    while (view && view.name !== name)\n      view = view.parentView;\n    return view || null;\n  } else {\n    return view;\n  }\n};\n\nBlaze._addEventMap = function (view, eventMap, thisInHandler) {\n  thisInHandler = (thisInHandler || null);\n  var handles = [];\n\n  if (! view._domrange)\n    throw new Error(\"View must have a DOMRange\");\n\n  view._domrange.onAttached(function attached_eventMaps(range, element) {\n    _.each(eventMap, function (handler, spec) {\n      var clauses = spec.split(/,\\s+/);\n      // iterate over clauses of spec, e.g. ['click .foo', 'click .bar']\n      _.each(clauses, function (clause) {\n        var parts = clause.split(/\\s+/);\n        if (parts.length === 0)\n          return;\n\n        var newEvents = parts.shift();\n        var selector = parts.join(' ');\n        handles.push(Blaze._EventSupport.listen(\n          element, newEvents, selector,\n          function (evt) {\n            if (! range.containsElement(evt.currentTarget))\n              return null;\n            var handlerThis = thisInHandler || this;\n            var handlerArgs = arguments;\n            return Blaze._withCurrentView(view, function () {\n              return handler.apply(handlerThis, handlerArgs);\n            });\n          },\n          range, function (r) {\n            return r.parentRange;\n          }));\n      });\n    });\n  });\n\n  view.onViewDestroyed(function () {\n    _.each(handles, function (h) {\n      h.stop();\n    });\n    handles.length = 0;\n  });\n};\n"]},"sourceType":"module","hash":"f964141193f49fafce121a2e2eaebf67840062d4"}
